{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "$ref": "#/definitions/Cluster",
    "$package": "envoy.config.cluster.v3",
    "definitions": {
        "Cluster": {
            "properties": {
                "transport_socket_matches": {
                    "items": {
                        "$ref": "#/definitions/envoy.config.cluster.v3.Cluster.TransportSocketMatch"
                    },
                    "type": "array",
                    "description": "Configuration to use different transport sockets for different endpoints. The entry of ``envoy.transport_socket_match`` in the :ref:`LbEndpoint.Metadata \u003cenvoy_v3_api_field_config.endpoint.v3.LbEndpoint.metadata\u003e` is used to match against the transport sockets as they appear in the list. The first :ref:`match \u003cenvoy_v3_api_msg_config.cluster.v3.Cluster.TransportSocketMatch\u003e` is used. For example, with the following match .. code-block:: yaml  transport_socket_matches:  - name: \"enableMTLS\"    match:      acceptMTLS: true    transport_socket:      name: envoy.transport_sockets.tls      config: { ... } # tls socket configuration  - name: \"defaultToPlaintext\"    match: {}    transport_socket:      name: envoy.transport_sockets.raw_buffer Connections to the endpoints whose metadata value under ``envoy.transport_socket_match`` having \"acceptMTLS\"/\"true\" key/value pair use the \"enableMTLS\" socket configuration. If a :ref:`socket match \u003cenvoy_v3_api_msg_config.cluster.v3.Cluster.TransportSocketMatch\u003e` with empty match criteria is provided, that always match any endpoint. For example, the \"defaultToPlaintext\" socket match in case above. If an endpoint metadata's value under ``envoy.transport_socket_match`` does not match any ``TransportSocketMatch``, socket configuration fallbacks to use the ``tls_context`` or ``transport_socket`` specified in this cluster. This field allows gradual and flexible transport socket configuration changes. The metadata of endpoints in EDS can indicate transport socket capabilities. For example, an endpoint's metadata can have two key value pairs as \"acceptMTLS\": \"true\", \"acceptPlaintext\": \"true\". While some other endpoints, only accepting plaintext traffic has \"acceptPlaintext\": \"true\" metadata information. Then the xDS server can configure the CDS to a client, Envoy A, to send mutual TLS traffic for endpoints with \"acceptMTLS\": \"true\", by adding a corresponding ``TransportSocketMatch`` in this field. Other client Envoys receive CDS without ``transport_socket_match`` set, and still send plain text traffic to the same cluster. This field can be used to specify custom transport socket configurations for health checks by adding matching key/value pairs in a health check's :ref:`transport socket match criteria \u003cenvoy_v3_api_field_config.core.v3.HealthCheck.transport_socket_match_criteria\u003e` field. [#comment:TODO(incfly): add a detailed architecture doc on intended usage.]"
                },
                "name": {
                    "minLength": 1,
                    "type": "string",
                    "description": "Supplies the name of the cluster which must be unique across all clusters. The cluster name is used when emitting :ref:`statistics \u003cconfig_cluster_manager_cluster_stats\u003e` if :ref:`alt_stat_name \u003cenvoy_v3_api_field_config.cluster.v3.Cluster.alt_stat_name\u003e` is not provided. Any ``:`` in the cluster name will be converted to ``_`` when emitting statistics."
                },
                "alt_stat_name": {
                    "type": "string",
                    "description": "An optional alternative to the cluster name to be used for observability. This name is used emitting stats for the cluster and access logging the cluster name. This will appear as additional information in configuration dumps of a cluster's current status as :ref:`observability_name \u003cenvoy_v3_api_field_admin.v3.ClusterStatus.observability_name\u003e` and as an additional tag \"upstream_cluster.name\" while tracing. Note: Any ``:`` in the name will be converted to ``_`` when emitting statistics. This should not be confused with :ref:`Router Filter Header \u003cconfig_http_filters_router_x-envoy-upstream-alt-stat-name\u003e`."
                },
                "type": {
                    "enum": [
                        "STATIC",
                        0,
                        "STRICT_DNS",
                        1,
                        "LOGICAL_DNS",
                        2,
                        "EDS",
                        3,
                        "ORIGINAL_DST",
                        4
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Discovery Type",
                    "description": "Refer to :ref:`service discovery type \u003carch_overview_service_discovery_types\u003e` for an explanation on each type."
                },
                "cluster_type": {
                    "$ref": "#/definitions/envoy.config.cluster.v3.Cluster.CustomClusterType",
                    "additionalProperties": true,
                    "description": "The custom cluster type."
                },
                "eds_cluster_config": {
                    "$ref": "#/definitions/envoy.config.cluster.v3.Cluster.EdsClusterConfig",
                    "additionalProperties": true,
                    "description": "Configuration to use for EDS updates for the Cluster."
                },
                "connect_timeout": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "description": "The timeout for new network connections to hosts in the cluster. If not set, a default value of 5s will be used.",
                    "format": "regex"
                },
                "per_connection_buffer_limit_bytes": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "Soft limit on size of the cluster’s connections read and write buffers. If unspecified, an implementation defined default is applied (1MiB)."
                },
                "lb_policy": {
                    "enum": [
                        "ROUND_ROBIN",
                        0,
                        "LEAST_REQUEST",
                        1,
                        "RING_HASH",
                        2,
                        "RANDOM",
                        3,
                        "MAGLEV",
                        5,
                        "CLUSTER_PROVIDED",
                        6,
                        "LOAD_BALANCING_POLICY_CONFIG",
                        7
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Lb Policy",
                    "description": "Refer to :ref:`load balancer type \u003carch_overview_load_balancing_types\u003e` architecture overview section for information on each type."
                },
                "load_assignment": {
                    "$ref": "#/definitions/envoy.config.endpoint.v3.ClusterLoadAssignment",
                    "additionalProperties": true,
                    "description": "Setting this is required for specifying members of :ref:`STATIC\u003cenvoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.STATIC\u003e`, :ref:`STRICT_DNS\u003cenvoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.STRICT_DNS\u003e` or :ref:`LOGICAL_DNS\u003cenvoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.LOGICAL_DNS\u003e` clusters. This field supersedes the ``hosts`` field in the v2 API. .. attention::   Setting this allows non-EDS cluster types to contain embedded EDS equivalent   :ref:`endpoint assignments\u003cenvoy_v3_api_msg_config.endpoint.v3.ClusterLoadAssignment\u003e`."
                },
                "health_checks": {
                    "items": {
                        "$ref": "#/definitions/envoy.config.core.v3.HealthCheck"
                    },
                    "type": "array",
                    "description": "Optional :ref:`active health checking \u003carch_overview_health_checking\u003e` configuration for the cluster. If no configuration is specified no health checking will be done and all cluster members will be considered healthy at all times."
                },
                "max_requests_per_connection": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "Optional maximum requests for a single upstream connection. This parameter is respected by both the HTTP/1.1 and HTTP/2 connection pool implementations. If not specified, there is no limit. Setting this parameter to 1 will effectively disable keep alive. .. attention::   This field has been deprecated in favor of the :ref:`max_requests_per_connection \u003cenvoy_v3_api_field_config.core.v3.HttpProtocolOptions.max_requests_per_connection\u003e` field."
                },
                "circuit_breakers": {
                    "$ref": "#/definitions/envoy.config.cluster.v3.CircuitBreakers",
                    "additionalProperties": true,
                    "description": "Optional :ref:`circuit breaking \u003carch_overview_circuit_break\u003e` for the cluster."
                },
                "upstream_http_protocol_options": {
                    "$ref": "#/definitions/envoy.config.core.v3.UpstreamHttpProtocolOptions",
                    "additionalProperties": true,
                    "description": "HTTP protocol options that are applied only to upstream HTTP connections. These options apply to all HTTP versions. This has been deprecated in favor of :ref:`upstream_http_protocol_options \u003cenvoy_v3_api_field_extensions.upstreams.http.v3.HttpProtocolOptions.upstream_http_protocol_options\u003e` in the :ref:`http_protocol_options \u003cenvoy_v3_api_msg_extensions.upstreams.http.v3.HttpProtocolOptions\u003e` message. upstream_http_protocol_options can be set via the cluster's :ref:`extension_protocol_options\u003cenvoy_v3_api_field_config.cluster.v3.Cluster.typed_extension_protocol_options\u003e`. See :ref:`upstream_http_protocol_options \u003cenvoy_v3_api_field_extensions.upstreams.http.v3.HttpProtocolOptions.upstream_http_protocol_options\u003e` for example usage."
                },
                "common_http_protocol_options": {
                    "$ref": "#/definitions/envoy.config.core.v3.HttpProtocolOptions",
                    "additionalProperties": true,
                    "description": "Additional options when handling HTTP requests upstream. These options will be applicable to both HTTP1 and HTTP2 requests. This has been deprecated in favor of :ref:`common_http_protocol_options \u003cenvoy_v3_api_field_extensions.upstreams.http.v3.HttpProtocolOptions.common_http_protocol_options\u003e` in the :ref:`http_protocol_options \u003cenvoy_v3_api_msg_extensions.upstreams.http.v3.HttpProtocolOptions\u003e` message. common_http_protocol_options can be set via the cluster's :ref:`extension_protocol_options\u003cenvoy_v3_api_field_config.cluster.v3.Cluster.typed_extension_protocol_options\u003e`. See :ref:`upstream_http_protocol_options \u003cenvoy_v3_api_field_extensions.upstreams.http.v3.HttpProtocolOptions.upstream_http_protocol_options\u003e` for example usage."
                },
                "http_protocol_options": {
                    "$ref": "#/definitions/envoy.config.core.v3.Http1ProtocolOptions",
                    "additionalProperties": true,
                    "description": "Additional options when handling HTTP1 requests. This has been deprecated in favor of http_protocol_options fields in the :ref:`http_protocol_options \u003cenvoy_v3_api_msg_extensions.upstreams.http.v3.HttpProtocolOptions\u003e` message. http_protocol_options can be set via the cluster's :ref:`extension_protocol_options\u003cenvoy_v3_api_field_config.cluster.v3.Cluster.typed_extension_protocol_options\u003e`. See :ref:`upstream_http_protocol_options \u003cenvoy_v3_api_field_extensions.upstreams.http.v3.HttpProtocolOptions.upstream_http_protocol_options\u003e` for example usage."
                },
                "http2_protocol_options": {
                    "$ref": "#/definitions/envoy.config.core.v3.Http2ProtocolOptions",
                    "additionalProperties": true,
                    "description": "Even if default HTTP2 protocol options are desired, this field must be set so that Envoy will assume that the upstream supports HTTP/2 when making new HTTP connection pool connections. Currently, Envoy only supports prior knowledge for upstream connections. Even if TLS is used with ALPN, ``http2_protocol_options`` must be specified. As an aside this allows HTTP/2 connections to happen over plain text. This has been deprecated in favor of http2_protocol_options fields in the :ref:`http_protocol_options \u003cenvoy_v3_api_msg_extensions.upstreams.http.v3.HttpProtocolOptions\u003e` message. http2_protocol_options can be set via the cluster's :ref:`extension_protocol_options\u003cenvoy_v3_api_field_config.cluster.v3.Cluster.typed_extension_protocol_options\u003e`. See :ref:`upstream_http_protocol_options \u003cenvoy_v3_api_field_extensions.upstreams.http.v3.HttpProtocolOptions.upstream_http_protocol_options\u003e` for example usage."
                },
                "typed_extension_protocol_options": {
                    "additionalProperties": {
                        "properties": {
                            "type_url": {
                                "type": "string",
                                "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. As of May 2023, there are no widely used type server implementations and no plans to implement one. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                            },
                            "value": {
                                "type": "string",
                                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                                "format": "binary",
                                "binaryEncoding": "base64"
                            }
                        },
                        "additionalProperties": true,
                        "type": "object"
                    },
                    "type": "object",
                    "description": "The extension_protocol_options field is used to provide extension-specific protocol options for upstream connections. The key should match the extension filter name, such as \"envoy.filters.network.thrift_proxy\". See the extension's documentation for details on specific options. [#next-major-version: make this a list of typed extensions.]"
                },
                "dns_refresh_rate": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "description": "If the DNS refresh rate is specified and the cluster type is either :ref:`STRICT_DNS\u003cenvoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.STRICT_DNS\u003e`, or :ref:`LOGICAL_DNS\u003cenvoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.LOGICAL_DNS\u003e`, this value is used as the cluster’s DNS refresh rate. The value configured must be at least 1ms. If this setting is not specified, the value defaults to 5000ms. For cluster types other than :ref:`STRICT_DNS\u003cenvoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.STRICT_DNS\u003e` and :ref:`LOGICAL_DNS\u003cenvoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.LOGICAL_DNS\u003e` this setting is ignored.",
                    "format": "regex"
                },
                "dns_failure_refresh_rate": {
                    "$ref": "#/definitions/envoy.config.cluster.v3.Cluster.RefreshRate",
                    "additionalProperties": true,
                    "description": "If the DNS failure refresh rate is specified and the cluster type is either :ref:`STRICT_DNS\u003cenvoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.STRICT_DNS\u003e`, or :ref:`LOGICAL_DNS\u003cenvoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.LOGICAL_DNS\u003e`, this is used as the cluster’s DNS refresh rate when requests are failing. If this setting is not specified, the failure refresh rate defaults to the DNS refresh rate. For cluster types other than :ref:`STRICT_DNS\u003cenvoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.STRICT_DNS\u003e` and :ref:`LOGICAL_DNS\u003cenvoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.LOGICAL_DNS\u003e` this setting is ignored."
                },
                "respect_dns_ttl": {
                    "type": "boolean",
                    "description": "Optional configuration for setting cluster's DNS refresh rate. If the value is set to true, cluster's DNS refresh rate will be set to resource record's TTL which comes from DNS resolution."
                },
                "dns_lookup_family": {
                    "enum": [
                        "AUTO",
                        0,
                        "V4_ONLY",
                        1,
                        "V6_ONLY",
                        2,
                        "V4_PREFERRED",
                        3,
                        "ALL",
                        4
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Dns Lookup Family",
                    "description": "When V4_ONLY is selected, the DNS resolver will only perform a lookup for addresses in the IPv4 family. If V6_ONLY is selected, the DNS resolver will only perform a lookup for addresses in the IPv6 family. If AUTO is specified, the DNS resolver will first perform a lookup for addresses in the IPv6 family and fallback to a lookup for addresses in the IPv4 family. This is semantically equivalent to a non-existent V6_PREFERRED option. AUTO is a legacy name that is more opaque than necessary and will be deprecated in favor of V6_PREFERRED in a future major version of the API. If V4_PREFERRED is specified, the DNS resolver will first perform a lookup for addresses in the IPv4 family and fallback to a lookup for addresses in the IPv6 family. i.e., the callback target will only get v6 addresses if there were NO v4 addresses to return. If ALL is specified, the DNS resolver will perform a lookup for both IPv4 and IPv6 families, and return all resolved addresses. When this is used, Happy Eyeballs will be enabled for upstream connections. Refer to :ref:`Happy Eyeballs Support \u003carch_overview_happy_eyeballs\u003e` for more information. For cluster types other than :ref:`STRICT_DNS\u003cenvoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.STRICT_DNS\u003e` and :ref:`LOGICAL_DNS\u003cenvoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.LOGICAL_DNS\u003e`, this setting is ignored. [#next-major-version: deprecate AUTO in favor of a V6_PREFERRED option.]"
                },
                "dns_resolvers": {
                    "items": {
                        "$ref": "#/definitions/envoy.config.core.v3.Address"
                    },
                    "type": "array",
                    "description": "If DNS resolvers are specified and the cluster type is either :ref:`STRICT_DNS\u003cenvoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.STRICT_DNS\u003e`, or :ref:`LOGICAL_DNS\u003cenvoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.LOGICAL_DNS\u003e`, this value is used to specify the cluster’s dns resolvers. If this setting is not specified, the value defaults to the default resolver, which uses /etc/resolv.conf for configuration. For cluster types other than :ref:`STRICT_DNS\u003cenvoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.STRICT_DNS\u003e` and :ref:`LOGICAL_DNS\u003cenvoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.LOGICAL_DNS\u003e` this setting is ignored. This field is deprecated in favor of ``dns_resolution_config`` which aggregates all of the DNS resolver configuration in a single message."
                },
                "use_tcp_for_dns_lookups": {
                    "type": "boolean",
                    "description": "Always use TCP queries instead of UDP queries for DNS lookups. This field is deprecated in favor of ``dns_resolution_config`` which aggregates all of the DNS resolver configuration in a single message."
                },
                "dns_resolution_config": {
                    "$ref": "#/definitions/envoy.config.core.v3.DnsResolutionConfig",
                    "additionalProperties": true,
                    "description": "DNS resolution configuration which includes the underlying dns resolver addresses and options. This field is deprecated in favor of :ref:`typed_dns_resolver_config \u003cenvoy_v3_api_field_config.cluster.v3.Cluster.typed_dns_resolver_config\u003e`."
                },
                "typed_dns_resolver_config": {
                    "$ref": "#/definitions/envoy.config.core.v3.TypedExtensionConfig",
                    "additionalProperties": true,
                    "description": "DNS resolver type configuration extension. This extension can be used to configure c-ares, apple, or any other DNS resolver types and the related parameters. For example, an object of :ref:`CaresDnsResolverConfig \u003cenvoy_v3_api_msg_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig\u003e` can be packed into this ``typed_dns_resolver_config``. This configuration replaces the :ref:`dns_resolution_config \u003cenvoy_v3_api_field_config.cluster.v3.Cluster.dns_resolution_config\u003e` configuration. During the transition period when both ``dns_resolution_config`` and ``typed_dns_resolver_config`` exists, when ``typed_dns_resolver_config`` is in place, Envoy will use it and ignore ``dns_resolution_config``. When ``typed_dns_resolver_config`` is missing, the default behavior is in place. [#extension-category: envoy.network.dns_resolver]"
                },
                "wait_for_warm_on_init": {
                    "additionalProperties": true,
                    "type": "boolean",
                    "description": "Optional configuration for having cluster readiness block on warm-up. Currently, only applicable for :ref:`STRICT_DNS\u003cenvoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.STRICT_DNS\u003e`, or :ref:`LOGICAL_DNS\u003cenvoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.LOGICAL_DNS\u003e`, or :ref:`Redis Cluster\u003carch_overview_redis\u003e`. If true, cluster readiness blocks on warm-up. If false, the cluster will complete initialization whether or not warm-up has completed. Defaults to true."
                },
                "outlier_detection": {
                    "$ref": "#/definitions/envoy.config.cluster.v3.OutlierDetection",
                    "additionalProperties": true,
                    "description": "If specified, outlier detection will be enabled for this upstream cluster. Each of the configuration values can be overridden via :ref:`runtime values \u003cconfig_cluster_manager_cluster_runtime_outlier_detection\u003e`."
                },
                "cleanup_interval": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "description": "The interval for removing stale hosts from a cluster type :ref:`ORIGINAL_DST\u003cenvoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.ORIGINAL_DST\u003e`. Hosts are considered stale if they have not been used as upstream destinations during this interval. New hosts are added to original destination clusters on demand as new connections are redirected to Envoy, causing the number of hosts in the cluster to grow over time. Hosts that are not stale (they are actively used as destinations) are kept in the cluster, which allows connections to them remain open, saving the latency that would otherwise be spent on opening new connections. If this setting is not specified, the value defaults to 5000ms. For cluster types other than :ref:`ORIGINAL_DST\u003cenvoy_v3_api_enum_value_config.cluster.v3.Cluster.DiscoveryType.ORIGINAL_DST\u003e` this setting is ignored.",
                    "format": "regex"
                },
                "upstream_bind_config": {
                    "$ref": "#/definitions/envoy.config.core.v3.BindConfig",
                    "additionalProperties": true,
                    "description": "Optional configuration used to bind newly established upstream connections. This overrides any bind_config specified in the bootstrap proto. If the address and port are empty, no bind will be performed."
                },
                "lb_subset_config": {
                    "$ref": "#/definitions/envoy.config.cluster.v3.Cluster.LbSubsetConfig",
                    "additionalProperties": true,
                    "description": "Configuration for load balancing subsetting."
                },
                "ring_hash_lb_config": {
                    "$ref": "#/definitions/envoy.config.cluster.v3.Cluster.RingHashLbConfig",
                    "additionalProperties": true,
                    "description": "Optional configuration for the Ring Hash load balancing policy."
                },
                "maglev_lb_config": {
                    "$ref": "#/definitions/envoy.config.cluster.v3.Cluster.MaglevLbConfig",
                    "additionalProperties": true,
                    "description": "Optional configuration for the Maglev load balancing policy."
                },
                "original_dst_lb_config": {
                    "$ref": "#/definitions/envoy.config.cluster.v3.Cluster.OriginalDstLbConfig",
                    "additionalProperties": true,
                    "description": "Optional configuration for the Original Destination load balancing policy."
                },
                "least_request_lb_config": {
                    "$ref": "#/definitions/envoy.config.cluster.v3.Cluster.LeastRequestLbConfig",
                    "additionalProperties": true,
                    "description": "Optional configuration for the LeastRequest load balancing policy."
                },
                "round_robin_lb_config": {
                    "$ref": "#/definitions/envoy.config.cluster.v3.Cluster.RoundRobinLbConfig",
                    "additionalProperties": true,
                    "description": "Optional configuration for the RoundRobin load balancing policy."
                },
                "common_lb_config": {
                    "$ref": "#/definitions/envoy.config.cluster.v3.Cluster.CommonLbConfig",
                    "additionalProperties": true,
                    "description": "Common configuration for all load balancer implementations."
                },
                "transport_socket": {
                    "$ref": "#/definitions/envoy.config.core.v3.TransportSocket",
                    "additionalProperties": true,
                    "description": "Optional custom transport socket implementation to use for upstream connections. To setup TLS, set a transport socket with name ``envoy.transport_sockets.tls`` and :ref:`UpstreamTlsContexts \u003cenvoy_v3_api_msg_extensions.transport_sockets.tls.v3.UpstreamTlsContext\u003e` in the ``typed_config``. If no transport socket configuration is specified, new connections will be set up with plaintext."
                },
                "metadata": {
                    "$ref": "#/definitions/envoy.config.core.v3.Metadata",
                    "additionalProperties": true,
                    "description": "The Metadata field can be used to provide additional information about the cluster. It can be used for stats, logging, and varying filter behavior. Fields should use reverse DNS notation to denote which entity within Envoy will need the information. For instance, if the metadata is intended for the Router filter, the filter name should be specified as ``envoy.filters.http.router``."
                },
                "protocol_selection": {
                    "enum": [
                        "USE_CONFIGURED_PROTOCOL",
                        0,
                        "USE_DOWNSTREAM_PROTOCOL",
                        1
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Cluster Protocol Selection"
                },
                "upstream_connection_options": {
                    "$ref": "#/definitions/envoy.config.cluster.v3.UpstreamConnectionOptions",
                    "additionalProperties": true,
                    "description": "Optional options for upstream connections."
                },
                "close_connections_on_host_health_failure": {
                    "type": "boolean",
                    "description": "If an upstream host becomes unhealthy (as determined by the configured health checks or outlier detection), immediately close all connections to the failed host. .. note::   This is currently only supported for connections created by tcp_proxy. .. note::   The current implementation of this feature closes all connections immediately when   the unhealthy status is detected. If there are a large number of connections open   to an upstream host that becomes unhealthy, Envoy may spend a substantial amount of   time exclusively closing these connections, and not processing any other traffic."
                },
                "ignore_health_on_host_removal": {
                    "type": "boolean",
                    "description": "If set to true, Envoy will ignore the health value of a host when processing its removal from service discovery. This means that if active health checking is used, Envoy will *not* wait for the endpoint to go unhealthy before removing it."
                },
                "filters": {
                    "items": {
                        "$ref": "#/definitions/envoy.config.cluster.v3.Filter"
                    },
                    "type": "array",
                    "description": "An (optional) network filter chain, listed in the order the filters should be applied. The chain will be applied to all outgoing connections that Envoy makes to the upstream servers of this cluster."
                },
                "load_balancing_policy": {
                    "$ref": "#/definitions/envoy.config.cluster.v3.LoadBalancingPolicy",
                    "additionalProperties": true,
                    "description": "If this field is set and is supported by the client, it will supersede the value of :ref:`lb_policy\u003cenvoy_v3_api_field_config.cluster.v3.Cluster.lb_policy\u003e`."
                },
                "lrs_server": {
                    "$ref": "#/definitions/envoy.config.core.v3.ConfigSource",
                    "additionalProperties": true,
                    "description": "[#not-implemented-hide:] If present, tells the client where to send load reports via LRS. If not present, the client will fall back to a client-side default, which may be either (a) don't send any load reports or (b) send load reports for all clusters to a single default server (which may be configured in the bootstrap file). Note that if multiple clusters point to the same LRS server, the client may choose to create a separate stream for each cluster or it may choose to coalesce the data for multiple clusters onto a single stream. Either way, the client must make sure to send the data for any given cluster on no more than one stream. [#next-major-version: In the v3 API, we should consider restructuring this somehow, maybe by allowing LRS to go on the ADS stream, or maybe by moving some of the negotiation from the LRS stream here.]"
                },
                "track_timeout_budgets": {
                    "type": "boolean",
                    "description": "If track_timeout_budgets is true, the :ref:`timeout budget histograms \u003cconfig_cluster_manager_cluster_stats_timeout_budgets\u003e` will be published for each request. These show what percentage of a request's per try and global timeout was used. A value of 0 would indicate that none of the timeout was used or that the timeout was infinite. A value of 100 would indicate that the request took the entirety of the timeout given to it. .. attention::   This field has been deprecated in favor of ``timeout_budgets``, part of   :ref:`track_cluster_stats \u003cenvoy_v3_api_field_config.cluster.v3.Cluster.track_cluster_stats\u003e`."
                },
                "upstream_config": {
                    "$ref": "#/definitions/envoy.config.core.v3.TypedExtensionConfig",
                    "additionalProperties": true,
                    "description": "Optional customization and configuration of upstream connection pool, and upstream type. Currently this field only applies for HTTP traffic but is designed for eventual use for custom TCP upstreams. For HTTP traffic, Envoy will generally take downstream HTTP and send it upstream as upstream HTTP, using the http connection pool and the codec from ``http2_protocol_options`` For routes where CONNECT termination is configured, Envoy will take downstream CONNECT requests and forward the CONNECT payload upstream over raw TCP using the tcp connection pool. The default pool used is the generic connection pool which creates the HTTP upstream for most HTTP requests, and the TCP upstream if CONNECT termination is configured. If users desire custom connection pool or upstream behavior, for example terminating CONNECT only if a custom filter indicates it is appropriate, the custom factories can be registered and configured here. [#extension-category: envoy.upstreams]"
                },
                "track_cluster_stats": {
                    "$ref": "#/definitions/envoy.config.cluster.v3.TrackClusterStats",
                    "additionalProperties": true,
                    "description": "Configuration to track optional cluster stats."
                },
                "preconnect_policy": {
                    "$ref": "#/definitions/envoy.config.cluster.v3.Cluster.PreconnectPolicy",
                    "additionalProperties": true,
                    "description": "Preconnect configuration for this cluster."
                },
                "connection_pool_per_downstream_connection": {
                    "type": "boolean",
                    "description": "If ``connection_pool_per_downstream_connection`` is true, the cluster will use a separate connection pool for every downstream connection"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Cluster",
            "description": "Configuration for a single upstream cluster. [#next-free-field: 57]"
        },
        "envoy.config.cluster.v3.CircuitBreakers": {
            "properties": {
                "thresholds": {
                    "items": {
                        "$ref": "#/definitions/envoy.config.cluster.v3.CircuitBreakers.Thresholds"
                    },
                    "type": "array",
                    "description": "If multiple :ref:`Thresholds\u003cenvoy_v3_api_msg_config.cluster.v3.CircuitBreakers.Thresholds\u003e` are defined with the same :ref:`RoutingPriority\u003cenvoy_v3_api_enum_config.core.v3.RoutingPriority\u003e`, the first one in the list is used. If no Thresholds is defined for a given :ref:`RoutingPriority\u003cenvoy_v3_api_enum_config.core.v3.RoutingPriority\u003e`, the default values are used."
                },
                "per_host_thresholds": {
                    "items": {
                        "$ref": "#/definitions/envoy.config.cluster.v3.CircuitBreakers.Thresholds"
                    },
                    "type": "array",
                    "description": "Optional per-host limits which apply to each individual host in a cluster. .. note::  currently only the :ref:`max_connections  \u003cenvoy_v3_api_field_config.cluster.v3.CircuitBreakers.Thresholds.max_connections\u003e` field is supported for per-host limits. If multiple per-host :ref:`Thresholds\u003cenvoy_v3_api_msg_config.cluster.v3.CircuitBreakers.Thresholds\u003e` are defined with the same :ref:`RoutingPriority\u003cenvoy_v3_api_enum_config.core.v3.RoutingPriority\u003e`, the first one in the list is used. If no per-host Thresholds are defined for a given :ref:`RoutingPriority\u003cenvoy_v3_api_enum_config.core.v3.RoutingPriority\u003e`, the cluster will not have per-host limits."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "[#protodoc-title: Circuit breakers]",
            "description": "[#protodoc-title: Circuit breakers]  :ref:`Circuit breaking\u003carch_overview_circuit_break\u003e` settings can be specified individually for each defined priority."
        },
        "envoy.config.cluster.v3.CircuitBreakers.Thresholds": {
            "properties": {
                "priority": {
                    "enum": [
                        "DEFAULT",
                        0,
                        "HIGH",
                        1
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "[#protodoc-title: Common types]",
                    "description": "[#protodoc-title: Common types]  Envoy supports :ref:`upstream priority routing \u003carch_overview_http_routing_priority\u003e` both at the route and the virtual cluster level. The current priority implementation uses different connection pool and circuit breaking settings for each priority level. This means that even for HTTP/2 requests, two physical connections will be used to an upstream host. In the future Envoy will likely support true HTTP/2 priority over a single upstream connection."
                },
                "max_connections": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "The maximum number of connections that Envoy will make to the upstream cluster. If not specified, the default is 1024."
                },
                "max_pending_requests": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "The maximum number of pending requests that Envoy will allow to the upstream cluster. If not specified, the default is 1024. This limit is applied as a connection limit for non-HTTP traffic."
                },
                "max_requests": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "The maximum number of parallel requests that Envoy will make to the upstream cluster. If not specified, the default is 1024. This limit does not apply to non-HTTP traffic."
                },
                "max_retries": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "The maximum number of parallel retries that Envoy will allow to the upstream cluster. If not specified, the default is 3."
                },
                "retry_budget": {
                    "$ref": "#/definitions/envoy.config.cluster.v3.CircuitBreakers.Thresholds.RetryBudget",
                    "additionalProperties": true,
                    "description": "Specifies a limit on concurrent retries in relation to the number of active requests. This parameter is optional. .. note::    If this field is set, the retry budget will override any configured retry circuit    breaker."
                },
                "track_remaining": {
                    "type": "boolean",
                    "description": "If track_remaining is true, then stats will be published that expose the number of resources remaining until the circuit breakers open. If not specified, the default is false. .. note::    If a retry budget is used in lieu of the max_retries circuit breaker,    the remaining retry resources remaining will not be tracked."
                },
                "max_connection_pools": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "The maximum number of connection pools per cluster that Envoy will concurrently support at once. If not specified, the default is unlimited. Set this for clusters which create a large number of connection pools. See :ref:`Circuit Breaking \u003carch_overview_circuit_break_cluster_maximum_connection_pools\u003e` for more details."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Thresholds",
            "description": "A Thresholds defines CircuitBreaker settings for a :ref:`RoutingPriority\u003cenvoy_v3_api_enum_config.core.v3.RoutingPriority\u003e`. [#next-free-field: 9]"
        },
        "envoy.config.cluster.v3.CircuitBreakers.Thresholds.RetryBudget": {
            "properties": {
                "budget_percent": {
                    "$ref": "#/definitions/envoy.type.v3.Percent",
                    "additionalProperties": true,
                    "description": "Specifies the limit on concurrent retries as a percentage of the sum of active requests and active pending requests. For example, if there are 100 active requests and the budget_percent is set to 25, there may be 25 active retries. This parameter is optional. Defaults to 20%."
                },
                "min_retry_concurrency": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "Specifies the minimum retry concurrency allowed for the retry budget. The limit on the number of active retries may never go below this number. This parameter is optional. Defaults to 3."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Retry Budget"
        },
        "envoy.config.cluster.v3.Cluster.CommonLbConfig": {
            "properties": {
                "healthy_panic_threshold": {
                    "$ref": "#/definitions/envoy.type.v3.Percent",
                    "additionalProperties": true,
                    "description": "Configures the :ref:`healthy panic threshold \u003carch_overview_load_balancing_panic_threshold\u003e`. If not specified, the default is 50%. To disable panic mode, set to 0%. .. note::   The specified percent will be truncated to the nearest 1%."
                },
                "zone_aware_lb_config": {
                    "$ref": "#/definitions/envoy.config.cluster.v3.Cluster.CommonLbConfig.ZoneAwareLbConfig",
                    "additionalProperties": true
                },
                "locality_weighted_lb_config": {
                    "$ref": "#/definitions/envoy.config.cluster.v3.Cluster.CommonLbConfig.LocalityWeightedLbConfig",
                    "additionalProperties": true
                },
                "update_merge_window": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "description": "If set, all health check/weight/metadata updates that happen within this duration will be merged and delivered in one shot when the duration expires. The start of the duration is when the first update happens. This is useful for big clusters, with potentially noisy deploys that might trigger excessive CPU usage due to a constant stream of healthcheck state changes or metadata updates. The first set of updates to be seen apply immediately (e.g.: a new cluster). Please always keep in mind that the use of sandbox technologies may change this behavior. If this is not set, we default to a merge window of 1000ms. To disable it, set the merge window to 0. Note: merging does not apply to cluster membership changes (e.g.: adds/removes); this is because merging those updates isn't currently safe. See https://github.com/envoyproxy/envoy/pull/3941.",
                    "format": "regex"
                },
                "ignore_new_hosts_until_first_hc": {
                    "type": "boolean",
                    "description": "If set to true, Envoy will :ref:`exclude \u003carch_overview_load_balancing_excluded\u003e` new hosts when computing load balancing weights until they have been health checked for the first time. This will have no effect unless active health checking is also configured."
                },
                "close_connections_on_host_set_change": {
                    "type": "boolean",
                    "description": "If set to ``true``, the cluster manager will drain all existing connections to upstream hosts whenever hosts are added or removed from the cluster."
                },
                "consistent_hashing_lb_config": {
                    "$ref": "#/definitions/envoy.config.cluster.v3.Cluster.CommonLbConfig.ConsistentHashingLbConfig",
                    "additionalProperties": true,
                    "description": "Common Configuration for all consistent hashing load balancers (MaglevLb, RingHashLb, etc.)"
                },
                "override_host_status": {
                    "$ref": "#/definitions/envoy.config.core.v3.HealthStatusSet",
                    "additionalProperties": true,
                    "description": "This controls what hosts are considered valid when using :ref:`host overrides \u003carch_overview_load_balancing_override_host\u003e`, which is used by some filters to modify the load balancing decision. If this is unset then [UNKNOWN, HEALTHY, DEGRADED] will be applied by default. If this is set with an empty set of statuses then host overrides will be ignored by the load balancing."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Common Lb Config",
            "description": "Common configuration for all load balancer implementations. [#next-free-field: 9]"
        },
        "envoy.config.cluster.v3.Cluster.CommonLbConfig.ConsistentHashingLbConfig": {
            "properties": {
                "use_hostname_for_hashing": {
                    "type": "boolean",
                    "description": "If set to ``true``, the cluster will use hostname instead of the resolved address as the key to consistently hash to an upstream host. Only valid for StrictDNS clusters with hostnames which resolve to a single IP address."
                },
                "hash_balance_factor": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "Configures percentage of average cluster load to bound per upstream host. For example, with a value of 150 no upstream host will get a load more than 1.5 times the average load of all the hosts in the cluster. If not specified, the load is not bounded for any upstream host. Typical value for this parameter is between 120 and 200. Minimum is 100. Applies to both Ring Hash and Maglev load balancers. This is implemented based on the method described in the paper https://arxiv.org/abs/1608.01350. For the specified ``hash_balance_factor``, requests to any upstream host are capped at ``hash_balance_factor/100`` times the average number of requests across the cluster. When a request arrives for an upstream host that is currently serving at its max capacity, linear probing is used to identify an eligible host. Further, the linear probe is implemented using a random jump in hosts ring/table to identify the eligible host (this technique is as described in the paper https://arxiv.org/abs/1908.08762 - the random jump avoids the cascading overflow effect when choosing the next host in the ring/table). If weights are specified on the hosts, they are respected. This is an O(N) algorithm, unlike other load balancers. Using a lower ``hash_balance_factor`` results in more hosts being probed, so use a higher value if you require better performance."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Consistent Hashing Lb Config",
            "description": "Common Configuration for all consistent hashing load balancers (MaglevLb, RingHashLb, etc.)"
        },
        "envoy.config.cluster.v3.Cluster.CommonLbConfig.LocalityWeightedLbConfig": {
            "additionalProperties": true,
            "type": "object",
            "title": "Locality Weighted Lb Config",
            "description": "Configuration for :ref:`locality weighted load balancing \u003carch_overview_load_balancing_locality_weighted_lb\u003e`"
        },
        "envoy.config.cluster.v3.Cluster.CommonLbConfig.ZoneAwareLbConfig": {
            "properties": {
                "routing_enabled": {
                    "$ref": "#/definitions/envoy.type.v3.Percent",
                    "additionalProperties": true,
                    "description": "Configures percentage of requests that will be considered for zone aware routing if zone aware routing is configured. If not specified, the default is 100%. * :ref:`runtime values \u003cconfig_cluster_manager_cluster_runtime_zone_routing\u003e`. * :ref:`Zone aware routing support \u003carch_overview_load_balancing_zone_aware_routing\u003e`."
                },
                "min_cluster_size": {
                    "additionalProperties": true,
                    "type": "string",
                    "description": "Configures minimum upstream cluster size required for zone aware routing If upstream cluster size is less than specified, zone aware routing is not performed even if zone aware routing is configured. If not specified, the default is 6. * :ref:`runtime values \u003cconfig_cluster_manager_cluster_runtime_zone_routing\u003e`. * :ref:`Zone aware routing support \u003carch_overview_load_balancing_zone_aware_routing\u003e`."
                },
                "fail_traffic_on_panic": {
                    "type": "boolean",
                    "description": "If set to true, Envoy will not consider any hosts when the cluster is in :ref:`panic mode\u003carch_overview_load_balancing_panic_threshold\u003e`. Instead, the cluster will fail all requests as if all hosts are unhealthy. This can help avoid potentially overwhelming a failing service."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Zone Aware Lb Config",
            "description": "Configuration for :ref:`zone aware routing \u003carch_overview_load_balancing_zone_aware_routing\u003e`."
        },
        "envoy.config.cluster.v3.Cluster.CustomClusterType": {
            "properties": {
                "name": {
                    "minLength": 1,
                    "type": "string",
                    "description": "The type of the cluster to instantiate. The name must match a supported cluster type."
                },
                "typed_config": {
                    "properties": {
                        "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. As of May 2023, there are no widely used type server implementations and no plans to implement one. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                        },
                        "value": {
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "binary",
                            "binaryEncoding": "base64"
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Cluster specific configuration which depends on the cluster being instantiated. See the supported cluster for further documentation. [#extension-category: envoy.clusters]"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Custom Cluster Type",
            "description": "Extended cluster type."
        },
        "envoy.config.cluster.v3.Cluster.EdsClusterConfig": {
            "properties": {
                "eds_config": {
                    "$ref": "#/definitions/envoy.config.core.v3.ConfigSource",
                    "additionalProperties": true,
                    "description": "Configuration for the source of EDS updates for this Cluster."
                },
                "service_name": {
                    "type": "string",
                    "description": "Optional alternative to cluster name to present to EDS. This does not have the same restrictions as cluster name, i.e. it may be arbitrary length. This may be a xdstp:// URL."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Eds Cluster Config",
            "description": "Only valid when discovery type is EDS."
        },
        "envoy.config.cluster.v3.Cluster.LbSubsetConfig": {
            "properties": {
                "fallback_policy": {
                    "enum": [
                        "NO_FALLBACK",
                        0,
                        "ANY_ENDPOINT",
                        1,
                        "DEFAULT_SUBSET",
                        2
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Lb Subset Fallback Policy",
                    "description": "If NO_FALLBACK is selected, a result equivalent to no healthy hosts is reported. If ANY_ENDPOINT is selected, any cluster endpoint may be returned (subject to policy, health checks, etc). If DEFAULT_SUBSET is selected, load balancing is performed over the endpoints matching the values from the default_subset field."
                },
                "default_subset": {
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Specifies the default subset of endpoints used during fallback if fallback_policy is :ref:`DEFAULT_SUBSET\u003cenvoy_v3_api_enum_value_config.cluster.v3.Cluster.LbSubsetConfig.LbSubsetFallbackPolicy.DEFAULT_SUBSET\u003e`. Each field in default_subset is compared to the matching LbEndpoint.Metadata under the ``envoy.lb`` namespace. It is valid for no hosts to match, in which case the behavior is the same as a fallback_policy of :ref:`NO_FALLBACK\u003cenvoy_v3_api_enum_value_config.cluster.v3.Cluster.LbSubsetConfig.LbSubsetFallbackPolicy.NO_FALLBACK\u003e`."
                },
                "subset_selectors": {
                    "items": {
                        "$ref": "#/definitions/envoy.config.cluster.v3.Cluster.LbSubsetConfig.LbSubsetSelector"
                    },
                    "type": "array",
                    "description": "For each entry, LbEndpoint.Metadata's ``envoy.lb`` namespace is traversed and a subset is created for each unique combination of key and value. For example: .. code-block:: json   { \"subset_selectors\": [       { \"keys\": [ \"version\" ] },       { \"keys\": [ \"stage\", \"hardware_type\" ] }   ]} A subset is matched when the metadata from the selected route and weighted cluster contains the same keys and values as the subset's metadata. The same host may appear in multiple subsets."
                },
                "locality_weight_aware": {
                    "type": "boolean",
                    "description": "If true, routing to subsets will take into account the localities and locality weights of the endpoints when making the routing decision. There are some potential pitfalls associated with enabling this feature, as the resulting traffic split after applying both a subset match and locality weights might be undesirable. Consider for example a situation in which you have 50/50 split across two localities X/Y which have 100 hosts each without subsetting. If the subset LB results in X having only 1 host selected but Y having 100, then a lot more load is being dumped on the single host in X than originally anticipated in the load balancing assignment delivered via EDS."
                },
                "scale_locality_weight": {
                    "type": "boolean",
                    "description": "When used with locality_weight_aware, scales the weight of each locality by the ratio of hosts in the subset vs hosts in the original subset. This aims to even out the load going to an individual locality if said locality is disproportionately affected by the subset predicate."
                },
                "panic_mode_any": {
                    "type": "boolean",
                    "description": "If true, when a fallback policy is configured and its corresponding subset fails to find a host this will cause any host to be selected instead. This is useful when using the default subset as the fallback policy, given the default subset might become empty. With this option enabled, if that happens the LB will attempt to select a host from the entire cluster."
                },
                "list_as_any": {
                    "type": "boolean",
                    "description": "If true, metadata specified for a metadata key will be matched against the corresponding endpoint metadata if the endpoint metadata matches the value exactly OR it is a list value and any of the elements in the list matches the criteria."
                },
                "metadata_fallback_policy": {
                    "enum": [
                        "METADATA_NO_FALLBACK",
                        0,
                        "FALLBACK_LIST",
                        1
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Lb Subset Metadata Fallback Policy"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Lb Subset Config",
            "description": "Optionally divide the endpoints in this cluster into subsets defined by endpoint metadata and selected by route and weighted cluster metadata. [#next-free-field: 9]"
        },
        "envoy.config.cluster.v3.Cluster.LbSubsetConfig.LbSubsetSelector": {
            "properties": {
                "keys": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "List of keys to match with the weighted cluster metadata."
                },
                "single_host_per_subset": {
                    "type": "boolean",
                    "description": "Selects a mode of operation in which each subset has only one host. This mode uses the same rules for choosing a host, but updating hosts is faster, especially for large numbers of hosts. If a match is found to a host, that host will be used regardless of priority levels. When this mode is enabled, configurations that contain more than one host with the same metadata value for the single key in ``keys`` will use only one of the hosts with the given key; no requests will be routed to the others. The cluster gauge :ref:`lb_subsets_single_host_per_subset_duplicate\u003cconfig_cluster_manager_cluster_stats_subset_lb\u003e` indicates how many duplicates are present in the current configuration."
                },
                "fallback_policy": {
                    "enum": [
                        "NOT_DEFINED",
                        0,
                        "NO_FALLBACK",
                        1,
                        "ANY_ENDPOINT",
                        2,
                        "DEFAULT_SUBSET",
                        3,
                        "KEYS_SUBSET",
                        4
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Lb Subset Selector Fallback Policy",
                    "description": "Allows to override top level fallback policy per selector."
                },
                "fallback_keys_subset": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "Subset of :ref:`keys\u003cenvoy_v3_api_field_config.cluster.v3.Cluster.LbSubsetConfig.LbSubsetSelector.keys\u003e` used by :ref:`KEYS_SUBSET\u003cenvoy_v3_api_enum_value_config.cluster.v3.Cluster.LbSubsetConfig.LbSubsetSelector.LbSubsetSelectorFallbackPolicy.KEYS_SUBSET\u003e` fallback policy. It has to be a non empty list if KEYS_SUBSET fallback policy is selected. For any other fallback policy the parameter is not used and should not be set. Only values also present in :ref:`keys\u003cenvoy_v3_api_field_config.cluster.v3.Cluster.LbSubsetConfig.LbSubsetSelector.keys\u003e` are allowed, but ``fallback_keys_subset`` cannot be equal to ``keys``."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Lb Subset Selector",
            "description": "Specifications for subsets."
        },
        "envoy.config.cluster.v3.Cluster.LeastRequestLbConfig": {
            "properties": {
                "choice_count": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "The number of random healthy hosts from which the host with the fewest active requests will be chosen. Defaults to 2 so that we perform two-choice selection if the field is not set."
                },
                "active_request_bias": {
                    "$ref": "#/definitions/envoy.config.core.v3.RuntimeDouble",
                    "additionalProperties": true,
                    "description": "The following formula is used to calculate the dynamic weights when hosts have different load balancing weights: ``weight = load_balancing_weight / (active_requests + 1)^active_request_bias`` The larger the active request bias is, the more aggressively active requests will lower the effective weight when all host weights are not equal. ``active_request_bias`` must be greater than or equal to 0.0. When ``active_request_bias == 0.0`` the Least Request Load Balancer doesn't consider the number of active requests at the time it picks a host and behaves like the Round Robin Load Balancer. When ``active_request_bias \u003e 0.0`` the Least Request Load Balancer scales the load balancing weight by the number of active requests at the time it does a pick. The value is cached for performance reasons and refreshed whenever one of the Load Balancer's host sets changes, e.g., whenever there is a host membership update or a host load balancing weight change. .. note::   This setting only takes effect if all host weights are not equal."
                },
                "slow_start_config": {
                    "$ref": "#/definitions/envoy.config.cluster.v3.Cluster.SlowStartConfig",
                    "additionalProperties": true,
                    "description": "Configuration for slow start mode. If this configuration is not set, slow start will not be not enabled."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Least Request Lb Config",
            "description": "Specific configuration for the LeastRequest load balancing policy."
        },
        "envoy.config.cluster.v3.Cluster.MaglevLbConfig": {
            "properties": {
                "table_size": {
                    "additionalProperties": true,
                    "type": "string",
                    "description": "The table size for Maglev hashing. Maglev aims for \"minimal disruption\" rather than an absolute guarantee. Minimal disruption means that when the set of upstream hosts change, a connection will likely be sent to the same upstream as it was before. Increasing the table size reduces the amount of disruption. The table size must be prime number limited to 5000011. If it is not specified, the default is 65537."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Maglev Lb Config",
            "description": "Specific configuration for the :ref:`Maglev\u003carch_overview_load_balancing_types_maglev\u003e` load balancing policy."
        },
        "envoy.config.cluster.v3.Cluster.OriginalDstLbConfig": {
            "properties": {
                "use_http_header": {
                    "type": "boolean",
                    "description": "When true, a HTTP header can be used to override the original dst address. The default header is :ref:`x-envoy-original-dst-host \u003cconfig_http_conn_man_headers_x-envoy-original-dst-host\u003e`. .. attention::   This header isn't sanitized by default, so enabling this feature allows HTTP clients to   route traffic to arbitrary hosts and/or ports, which may have serious security   consequences. .. note::   If the header appears multiple times only the first value is used."
                },
                "http_header_name": {
                    "type": "string",
                    "description": "The http header to override destination address if :ref:`use_http_header \u003cenvoy_v3_api_field_config.cluster.v3.Cluster.OriginalDstLbConfig.use_http_header\u003e`. is set to true. If the value is empty, :ref:`x-envoy-original-dst-host \u003cconfig_http_conn_man_headers_x-envoy-original-dst-host\u003e` will be used."
                },
                "upstream_port_override": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "The port to override for the original dst address. This port will take precedence over filter state and header override ports"
                },
                "metadata_key": {
                    "$ref": "#/definitions/envoy.type.metadata.v3.MetadataKey",
                    "additionalProperties": true,
                    "description": "The dynamic metadata key to override destination address. First the request metadata is considered, then the connection one."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Original Dst Lb Config",
            "description": "Specific configuration for the :ref:`Original Destination \u003carch_overview_load_balancing_types_original_destination\u003e` load balancing policy. [#extension: envoy.clusters.original_dst]"
        },
        "envoy.config.cluster.v3.Cluster.PreconnectPolicy": {
            "properties": {
                "per_upstream_preconnect_ratio": {
                    "additionalProperties": true,
                    "type": "number",
                    "description": "Indicates how many streams (rounded up) can be anticipated per-upstream for each incoming stream. This is useful for high-QPS or latency-sensitive services. Preconnecting will only be done if the upstream is healthy and the cluster has traffic. For example if this is 2, for an incoming HTTP/1.1 stream, 2 connections will be established, one for the new incoming stream, and one for a presumed follow-up stream. For HTTP/2, only one connection would be established by default as one connection can serve both the original and presumed follow-up stream. In steady state for non-multiplexed connections a value of 1.5 would mean if there were 100 active streams, there would be 100 connections in use, and 50 connections preconnected. This might be a useful value for something like short lived single-use connections, for example proxying HTTP/1.1 if keep-alive were false and each stream resulted in connection termination. It would likely be overkill for long lived connections, such as TCP proxying SMTP or regular HTTP/1.1 with keep-alive. For long lived traffic, a value of 1.05 would be more reasonable, where for every 100 connections, 5 preconnected connections would be in the queue in case of unexpected disconnects where the connection could not be reused. If this value is not set, or set explicitly to one, Envoy will fetch as many connections as needed to serve streams in flight. This means in steady state if a connection is torn down, a subsequent streams will pay an upstream-rtt latency penalty waiting for a new connection. This is limited somewhat arbitrarily to 3 because preconnecting too aggressively can harm latency more than the preconnecting helps."
                },
                "predictive_preconnect_ratio": {
                    "additionalProperties": true,
                    "type": "number",
                    "description": "Indicates how many streams (rounded up) can be anticipated across a cluster for each stream, useful for low QPS services. This is currently supported for a subset of deterministic non-hash-based load-balancing algorithms (weighted round robin, random). Unlike ``per_upstream_preconnect_ratio`` this preconnects across the upstream instances in a cluster, doing best effort predictions of what upstream would be picked next and pre-establishing a connection. Preconnecting will be limited to one preconnect per configured upstream in the cluster and will only be done if there are healthy upstreams and the cluster has traffic. For example if preconnecting is set to 2 for a round robin HTTP/2 cluster, on the first incoming stream, 2 connections will be preconnected - one to the first upstream for this cluster, one to the second on the assumption there will be a follow-up stream. If this value is not set, or set explicitly to one, Envoy will fetch as many connections as needed to serve streams in flight, so during warm up and in steady state if a connection is closed (and per_upstream_preconnect_ratio is not set), there will be a latency hit for connection establishment. If both this and preconnect_ratio are set, Envoy will make sure both predicted needs are met, basically preconnecting max(predictive-preconnect, per-upstream-preconnect), for each upstream."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Preconnect Policy"
        },
        "envoy.config.cluster.v3.Cluster.RefreshRate": {
            "properties": {
                "base_interval": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "description": "Specifies the base interval between refreshes. This parameter is required and must be greater than zero and less than :ref:`max_interval \u003cenvoy_v3_api_field_config.cluster.v3.Cluster.RefreshRate.max_interval\u003e`.",
                    "format": "regex"
                },
                "max_interval": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "description": "Specifies the maximum interval between refreshes. This parameter is optional, but must be greater than or equal to the :ref:`base_interval \u003cenvoy_v3_api_field_config.cluster.v3.Cluster.RefreshRate.base_interval\u003e`  if set. The default is 10 times the :ref:`base_interval \u003cenvoy_v3_api_field_config.cluster.v3.Cluster.RefreshRate.base_interval\u003e`.",
                    "format": "regex"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Refresh Rate"
        },
        "envoy.config.cluster.v3.Cluster.RingHashLbConfig": {
            "properties": {
                "minimum_ring_size": {
                    "additionalProperties": true,
                    "type": "string",
                    "description": "Minimum hash ring size. The larger the ring is (that is, the more hashes there are for each provided host) the better the request distribution will reflect the desired weights. Defaults to 1024 entries, and limited to 8M entries. See also :ref:`maximum_ring_size\u003cenvoy_v3_api_field_config.cluster.v3.Cluster.RingHashLbConfig.maximum_ring_size\u003e`."
                },
                "hash_function": {
                    "enum": [
                        "XX_HASH",
                        0,
                        "MURMUR_HASH_2",
                        1
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Hash Function",
                    "description": "The hash function used to hash hosts onto the ketama ring."
                },
                "maximum_ring_size": {
                    "additionalProperties": true,
                    "type": "string",
                    "description": "Maximum hash ring size. Defaults to 8M entries, and limited to 8M entries, but can be lowered to further constrain resource use. See also :ref:`minimum_ring_size\u003cenvoy_v3_api_field_config.cluster.v3.Cluster.RingHashLbConfig.minimum_ring_size\u003e`."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Ring Hash Lb Config",
            "description": "Specific configuration for the :ref:`RingHash\u003carch_overview_load_balancing_types_ring_hash\u003e` load balancing policy."
        },
        "envoy.config.cluster.v3.Cluster.RoundRobinLbConfig": {
            "properties": {
                "slow_start_config": {
                    "$ref": "#/definitions/envoy.config.cluster.v3.Cluster.SlowStartConfig",
                    "additionalProperties": true,
                    "description": "Configuration for slow start mode. If this configuration is not set, slow start will not be not enabled."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Round Robin Lb Config",
            "description": "Specific configuration for the RoundRobin load balancing policy."
        },
        "envoy.config.cluster.v3.Cluster.SlowStartConfig": {
            "properties": {
                "slow_start_window": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "description": "Represents the size of slow start window. If set, the newly created host remains in slow start mode starting from its creation time for the duration of slow start window.",
                    "format": "regex"
                },
                "aggression": {
                    "$ref": "#/definitions/envoy.config.core.v3.RuntimeDouble",
                    "additionalProperties": true,
                    "description": "This parameter controls the speed of traffic increase over the slow start window. Defaults to 1.0, so that endpoint would get linearly increasing amount of traffic. When increasing the value for this parameter, the speed of traffic ramp-up increases non-linearly. The value of aggression parameter should be greater than 0.0. By tuning the parameter, is possible to achieve polynomial or exponential shape of ramp-up curve. During slow start window, effective weight of an endpoint would be scaled with time factor and aggression: ``new_weight = weight * max(min_weight_percent, time_factor ^ (1 / aggression))``, where ``time_factor=(time_since_start_seconds / slow_start_time_seconds)``. As time progresses, more and more traffic would be sent to endpoint, which is in slow start window. Once host exits slow start, time_factor and aggression no longer affect its weight."
                },
                "min_weight_percent": {
                    "$ref": "#/definitions/envoy.type.v3.Percent",
                    "additionalProperties": true,
                    "description": "Configures the minimum percentage of origin weight that avoids too small new weight, which may cause endpoints in slow start mode receive no traffic in slow start window. If not specified, the default is 10%."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Slow Start Config",
            "description": "Configuration for :ref:`slow start mode \u003carch_overview_load_balancing_slow_start\u003e`."
        },
        "envoy.config.cluster.v3.Cluster.TransportSocketMatch": {
            "properties": {
                "name": {
                    "minLength": 1,
                    "type": "string",
                    "description": "The name of the match, used in stats generation."
                },
                "match": {
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Optional endpoint metadata match criteria. The connection to the endpoint with metadata matching what is set in this field will use the transport socket configuration specified here. The endpoint's metadata entry in ``envoy.transport_socket_match`` is used to match against the values specified in this field."
                },
                "transport_socket": {
                    "$ref": "#/definitions/envoy.config.core.v3.TransportSocket",
                    "additionalProperties": true,
                    "description": "The configuration of the transport socket. [#extension-category: envoy.transport_sockets.upstream]"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Transport Socket Match",
            "description": "TransportSocketMatch specifies what transport socket config will be used when the match conditions are satisfied."
        },
        "envoy.config.cluster.v3.Filter": {
            "properties": {
                "name": {
                    "minLength": 1,
                    "type": "string",
                    "description": "The name of the filter configuration."
                },
                "typed_config": {
                    "properties": {
                        "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. As of May 2023, there are no widely used type server implementations and no plans to implement one. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                        },
                        "value": {
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "binary",
                            "binaryEncoding": "base64"
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Filter specific configuration which depends on the filter being instantiated. See the supported filters for further documentation. Note that Envoy's :ref:`downstream network filters \u003cconfig_network_filters\u003e` are not valid upstream network filters. Only one of typed_config or config_discovery can be used."
                },
                "config_discovery": {
                    "$ref": "#/definitions/envoy.config.core.v3.ExtensionConfigSource",
                    "additionalProperties": true,
                    "description": "Configuration source specifier for an extension configuration discovery service. In case of a failure and without the default configuration, the listener closes the connections. Only one of typed_config or config_discovery can be used."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "[#protodoc-title: Upstream network filters]\n Upstream network filters apply to the connections to the upstream cluster hosts.",
            "description": "[#protodoc-title: Upstream network filters] Upstream network filters apply to the connections to the upstream cluster hosts."
        },
        "envoy.config.cluster.v3.LoadBalancingPolicy": {
            "properties": {
                "policies": {
                    "items": {
                        "$ref": "#/definitions/envoy.config.cluster.v3.LoadBalancingPolicy.Policy"
                    },
                    "type": "array",
                    "description": "Each client will iterate over the list in order and stop at the first policy that it supports. This provides a mechanism for starting to use new LB policies that are not yet supported by all clients."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Load Balancing Policy",
            "description": "Extensible load balancing policy configuration. Every LB policy defined via this mechanism will be identified via a unique name using reverse DNS notation. If the policy needs configuration parameters, it must define a message for its own configuration, which will be stored in the config field. The name of the policy will tell clients which type of message they should expect to see in the config field. Note that there are cases where it is useful to be able to independently select LB policies for choosing a locality and for choosing an endpoint within that locality. For example, a given deployment may always use the same policy to choose the locality, but for choosing the endpoint within the locality, some clusters may use weighted-round-robin, while others may use some sort of session-based balancing. This can be accomplished via hierarchical LB policies, where the parent LB policy creates a child LB policy for each locality. For each request, the parent chooses the locality and then delegates to the child policy for that locality to choose the endpoint within the locality. To facilitate this, the config message for the top-level LB policy may include a field of type LoadBalancingPolicy that specifies the child policy."
        },
        "envoy.config.cluster.v3.LoadBalancingPolicy.Policy": {
            "properties": {
                "typed_extension_config": {
                    "$ref": "#/definitions/envoy.config.core.v3.TypedExtensionConfig",
                    "additionalProperties": true,
                    "description": "[#extension-category: envoy.load_balancing_policies]"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Policy"
        },
        "envoy.config.cluster.v3.OutlierDetection": {
            "properties": {
                "consecutive_5xx": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "The number of consecutive server-side error responses (for HTTP traffic, 5xx responses; for TCP traffic, connection failures; for Redis, failure to respond PONG; etc.) before a consecutive 5xx ejection occurs. Defaults to 5."
                },
                "interval": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "description": "The time interval between ejection analysis sweeps. This can result in both new ejections as well as hosts being returned to service. Defaults to 10000ms or 10s.",
                    "format": "regex"
                },
                "base_ejection_time": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "description": "The base time that a host is ejected for. The real time is equal to the base time multiplied by the number of times the host has been ejected and is capped by :ref:`max_ejection_time\u003cenvoy_v3_api_field_config.cluster.v3.OutlierDetection.max_ejection_time\u003e`. Defaults to 30000ms or 30s.",
                    "format": "regex"
                },
                "max_ejection_percent": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "The maximum % of an upstream cluster that can be ejected due to outlier detection. Defaults to 10% but will eject at least one host regardless of the value."
                },
                "enforcing_consecutive_5xx": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "The % chance that a host will be actually ejected when an outlier status is detected through consecutive 5xx. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100."
                },
                "enforcing_success_rate": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "The % chance that a host will be actually ejected when an outlier status is detected through success rate statistics. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100."
                },
                "success_rate_minimum_hosts": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "The number of hosts in a cluster that must have enough request volume to detect success rate outliers. If the number of hosts is less than this setting, outlier detection via success rate statistics is not performed for any host in the cluster. Defaults to 5."
                },
                "success_rate_request_volume": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "The minimum number of total requests that must be collected in one interval (as defined by the interval duration above) to include this host in success rate based outlier detection. If the volume is lower than this setting, outlier detection via success rate statistics is not performed for that host. Defaults to 100."
                },
                "success_rate_stdev_factor": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "This factor is used to determine the ejection threshold for success rate outlier ejection. The ejection threshold is the difference between the mean success rate, and the product of this factor and the standard deviation of the mean success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided by a thousand to get a double. That is, if the desired factor is 1.9, the runtime value should be 1900. Defaults to 1900."
                },
                "consecutive_gateway_failure": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "The number of consecutive gateway failures (502, 503, 504 status codes) before a consecutive gateway failure ejection occurs. Defaults to 5."
                },
                "enforcing_consecutive_gateway_failure": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "The % chance that a host will be actually ejected when an outlier status is detected through consecutive gateway failures. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 0."
                },
                "split_external_local_origin_errors": {
                    "type": "boolean",
                    "description": "Determines whether to distinguish local origin failures from external errors. If set to true the following configuration parameters are taken into account: :ref:`consecutive_local_origin_failure\u003cenvoy_v3_api_field_config.cluster.v3.OutlierDetection.consecutive_local_origin_failure\u003e`, :ref:`enforcing_consecutive_local_origin_failure\u003cenvoy_v3_api_field_config.cluster.v3.OutlierDetection.enforcing_consecutive_local_origin_failure\u003e` and :ref:`enforcing_local_origin_success_rate\u003cenvoy_v3_api_field_config.cluster.v3.OutlierDetection.enforcing_local_origin_success_rate\u003e`. Defaults to false."
                },
                "consecutive_local_origin_failure": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "The number of consecutive locally originated failures before ejection occurs. Defaults to 5. Parameter takes effect only when :ref:`split_external_local_origin_errors\u003cenvoy_v3_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors\u003e` is set to true."
                },
                "enforcing_consecutive_local_origin_failure": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "The % chance that a host will be actually ejected when an outlier status is detected through consecutive locally originated failures. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100. Parameter takes effect only when :ref:`split_external_local_origin_errors\u003cenvoy_v3_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors\u003e` is set to true."
                },
                "enforcing_local_origin_success_rate": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "The % chance that a host will be actually ejected when an outlier status is detected through success rate statistics for locally originated errors. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100. Parameter takes effect only when :ref:`split_external_local_origin_errors\u003cenvoy_v3_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors\u003e` is set to true."
                },
                "failure_percentage_threshold": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "The failure percentage to use when determining failure percentage-based outlier detection. If the failure percentage of a given host is greater than or equal to this value, it will be ejected. Defaults to 85."
                },
                "enforcing_failure_percentage": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "The % chance that a host will be actually ejected when an outlier status is detected through failure percentage statistics. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 0. [#next-major-version: setting this without setting failure_percentage_threshold should be invalid in v4.]"
                },
                "enforcing_failure_percentage_local_origin": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "The % chance that a host will be actually ejected when an outlier status is detected through local-origin failure percentage statistics. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 0."
                },
                "failure_percentage_minimum_hosts": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "The minimum number of hosts in a cluster in order to perform failure percentage-based ejection. If the total number of hosts in the cluster is less than this value, failure percentage-based ejection will not be performed. Defaults to 5."
                },
                "failure_percentage_request_volume": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "The minimum number of total requests that must be collected in one interval (as defined by the interval duration above) to perform failure percentage-based ejection for this host. If the volume is lower than this setting, failure percentage-based ejection will not be performed for this host. Defaults to 50."
                },
                "max_ejection_time": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "description": "The maximum time that a host is ejected for. See :ref:`base_ejection_time\u003cenvoy_v3_api_field_config.cluster.v3.OutlierDetection.base_ejection_time\u003e` for more information. If not specified, the default value (300000ms or 300s) or :ref:`base_ejection_time\u003cenvoy_v3_api_field_config.cluster.v3.OutlierDetection.base_ejection_time\u003e` value is applied, whatever is larger.",
                    "format": "regex"
                },
                "max_ejection_time_jitter": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "description": "The maximum amount of jitter to add to the ejection time, in order to prevent a 'thundering herd' effect where all proxies try to reconnect to host at the same time. See :ref:`max_ejection_time_jitter\u003cenvoy_v3_api_field_config.cluster.v3.OutlierDetection.base_ejection_time\u003e` Defaults to 0s.",
                    "format": "regex"
                },
                "successful_active_health_check_uneject_host": {
                    "additionalProperties": true,
                    "type": "boolean",
                    "description": "If active health checking is enabled and a host is ejected by outlier detection, a successful active health check unejects the host by default and considers it as healthy. Unejection also clears all the outlier detection counters. To change this default behavior set this config to ``false`` where active health checking will not uneject the host. Defaults to true."
                },
                "monitors": {
                    "items": {
                        "$ref": "#/definitions/envoy.config.core.v3.TypedExtensionConfig"
                    },
                    "type": "array",
                    "description": "Set of host's passive monitors. [#not-implemented-hide:]"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "[#protodoc-title: Outlier detection]",
            "description": "[#protodoc-title: Outlier detection]  See the :ref:`architecture overview \u003carch_overview_outlier_detection\u003e` for more information on outlier detection. [#next-free-field: 25]"
        },
        "envoy.config.cluster.v3.TrackClusterStats": {
            "properties": {
                "timeout_budgets": {
                    "type": "boolean",
                    "description": "If timeout_budgets is true, the :ref:`timeout budget histograms \u003cconfig_cluster_manager_cluster_stats_timeout_budgets\u003e` will be published for each request. These show what percentage of a request's per try and global timeout was used. A value of 0 would indicate that none of the timeout was used or that the timeout was infinite. A value of 100 would indicate that the request took the entirety of the timeout given to it."
                },
                "request_response_sizes": {
                    "type": "boolean",
                    "description": "If request_response_sizes is true, then the :ref:`histograms \u003cconfig_cluster_manager_cluster_stats_request_response_sizes\u003e`  tracking header and body sizes of requests and responses will be published."
                },
                "per_endpoint_stats": {
                    "type": "boolean",
                    "description": "If true, some stats will be emitted per-endpoint, similar to the stats in admin ``/clusters`` output. This does not currently output correct stats during a hot-restart. This is not currently implemented by all stat sinks. These stats do not honor filtering or tag extraction rules in :ref:`StatsConfig \u003cenvoy_v3_api_msg_config.metrics.v3.StatsConfig\u003e` (but fixed-value tags are supported). Admin endpoint filtering is supported. This may not be used at the same time as :ref:`load_stats_config \u003cenvoy_v3_api_field_config.bootstrap.v3.ClusterManager.load_stats_config\u003e`."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Track Cluster Stats"
        },
        "envoy.config.cluster.v3.UpstreamConnectionOptions": {
            "properties": {
                "tcp_keepalive": {
                    "$ref": "#/definitions/envoy.config.core.v3.TcpKeepalive",
                    "additionalProperties": true,
                    "description": "If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives."
                },
                "set_local_interface_name_on_upstream_connections": {
                    "type": "boolean",
                    "description": "If enabled, associates the interface name of the local address with the upstream connection. This can be used by extensions during processing of requests. The association mechanism is implementation specific. Defaults to false due to performance concerns."
                },
                "happy_eyeballs_config": {
                    "$ref": "#/definitions/envoy.config.cluster.v3.UpstreamConnectionOptions.HappyEyeballsConfig",
                    "additionalProperties": true,
                    "description": "Configurations for happy eyeballs algorithm. Add configs for first_address_family_version and first_address_family_count when sorting destination ip addresses."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Upstream Connection Options"
        },
        "envoy.config.cluster.v3.UpstreamConnectionOptions.HappyEyeballsConfig": {
            "properties": {
                "first_address_family_version": {
                    "enum": [
                        "DEFAULT",
                        0,
                        "V4",
                        1,
                        "V6",
                        2
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "First Address Family Version"
                },
                "first_address_family_count": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "Specify the number of addresses of the first_address_family_version being attempted for connection before the other address family."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Happy Eyeballs Config"
        },
        "envoy.config.core.v3.Address": {
            "properties": {
                "socket_address": {
                    "$ref": "#/definitions/envoy.config.core.v3.SocketAddress",
                    "additionalProperties": true
                },
                "pipe": {
                    "$ref": "#/definitions/envoy.config.core.v3.Pipe",
                    "additionalProperties": true
                },
                "envoy_internal_address": {
                    "$ref": "#/definitions/envoy.config.core.v3.EnvoyInternalAddress",
                    "additionalProperties": true,
                    "description": "Specifies a user-space address handled by :ref:`internal listeners \u003cenvoy_v3_api_field_config.listener.v3.Listener.internal_listener\u003e`."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Address",
            "description": "Addresses specify either a logical or physical address and port, which are used to tell Envoy where to bind/listen, connect to upstream and find management servers."
        },
        "envoy.config.core.v3.AggregatedConfigSource": {
            "additionalProperties": true,
            "type": "object",
            "title": "Aggregated Config Source",
            "description": "Aggregated Discovery Service (ADS) options. This is currently empty, but when set in :ref:`ConfigSource \u003cenvoy_v3_api_msg_config.core.v3.ConfigSource\u003e` can be used to specify that ADS is to be used."
        },
        "envoy.config.core.v3.ApiConfigSource": {
            "properties": {
                "api_type": {
                    "enum": [
                        "DEPRECATED_AND_UNAVAILABLE_DO_NOT_USE",
                        0,
                        "REST",
                        1,
                        "GRPC",
                        2,
                        "DELTA_GRPC",
                        3,
                        "AGGREGATED_GRPC",
                        5,
                        "AGGREGATED_DELTA_GRPC",
                        6
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Api Type",
                    "description": "APIs may be fetched via either REST or gRPC."
                },
                "transport_api_version": {
                    "enum": [
                        "AUTO",
                        0,
                        "V2",
                        1,
                        "V3",
                        2
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "[#protodoc-title: Configuration sources]",
                    "description": "[#protodoc-title: Configuration sources]  xDS API and non-xDS services version. This is used to describe both resource and transport protocol versions (in distinct configuration fields)."
                },
                "cluster_names": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "Cluster names should be used only with REST. If \u003e 1 cluster is defined, clusters will be cycled through if any kind of failure occurs. .. note::  The cluster with name ``cluster_name`` must be statically defined and its  type must not be ``EDS``."
                },
                "grpc_services": {
                    "items": {
                        "$ref": "#/definitions/envoy.config.core.v3.GrpcService"
                    },
                    "type": "array",
                    "description": "Multiple gRPC services be provided for GRPC. If \u003e 1 cluster is defined, services will be cycled through if any kind of failure occurs."
                },
                "refresh_delay": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "description": "For REST APIs, the delay between successive polls.",
                    "format": "regex"
                },
                "request_timeout": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "description": "For REST APIs, the request timeout. If not set, a default value of 1s will be used.",
                    "format": "regex"
                },
                "rate_limit_settings": {
                    "$ref": "#/definitions/envoy.config.core.v3.RateLimitSettings",
                    "additionalProperties": true,
                    "description": "For GRPC APIs, the rate limit settings. If present, discovery requests made by Envoy will be rate limited."
                },
                "set_node_on_first_message_only": {
                    "type": "boolean",
                    "description": "Skip the node identifier in subsequent discovery requests for streaming gRPC config types."
                },
                "config_validators": {
                    "items": {
                        "$ref": "#/definitions/envoy.config.core.v3.TypedExtensionConfig"
                    },
                    "type": "array",
                    "description": "A list of config validators that will be executed when a new update is received from the ApiConfigSource. Note that each validator handles a specific xDS service type, and only the validators corresponding to the type url (in ``:ref: DiscoveryResponse`` or ``:ref: DeltaDiscoveryResponse``) will be invoked. If the validator returns false or throws an exception, the config will be rejected by the client, and a NACK will be sent. [#extension-category: envoy.config.validators]"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Api Config Source",
            "description": "API configuration source. This identifies the API type and cluster that Envoy will use to fetch an xDS API. [#next-free-field: 10]"
        },
        "envoy.config.core.v3.BackoffStrategy": {
            "properties": {
                "base_interval": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "description": "The base interval to be used for the next back off computation. It should be greater than zero and less than or equal to :ref:`max_interval \u003cenvoy_v3_api_field_config.core.v3.BackoffStrategy.max_interval\u003e`.",
                    "format": "regex"
                },
                "max_interval": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "description": "Specifies the maximum interval between retries. This parameter is optional, but must be greater than or equal to the :ref:`base_interval \u003cenvoy_v3_api_field_config.core.v3.BackoffStrategy.base_interval\u003e` if set. The default is 10 times the :ref:`base_interval \u003cenvoy_v3_api_field_config.core.v3.BackoffStrategy.base_interval\u003e`.",
                    "format": "regex"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "[#protodoc-title: Backoff strategy]",
            "description": "[#protodoc-title: Backoff strategy]  Configuration defining a jittered exponential back off strategy."
        },
        "envoy.config.core.v3.BindConfig": {
            "properties": {
                "source_address": {
                    "$ref": "#/definitions/envoy.config.core.v3.SocketAddress",
                    "additionalProperties": true,
                    "description": "The address to bind to when creating a socket."
                },
                "freebind": {
                    "additionalProperties": true,
                    "type": "boolean",
                    "description": "Whether to set the ``IP_FREEBIND`` option when creating the socket. When this flag is set to true, allows the :ref:`source_address \u003cenvoy_v3_api_field_config.core.v3.BindConfig.source_address\u003e` to be an IP address that is not configured on the system running Envoy. When this flag is set to false, the option ``IP_FREEBIND`` is disabled on the socket. When this flag is not set (default), the socket is not modified, i.e. the option is neither enabled nor disabled."
                },
                "socket_options": {
                    "items": {
                        "$ref": "#/definitions/envoy.config.core.v3.SocketOption"
                    },
                    "type": "array",
                    "description": "Additional socket options that may not be present in Envoy source code or precompiled binaries."
                },
                "extra_source_addresses": {
                    "items": {
                        "$ref": "#/definitions/envoy.config.core.v3.ExtraSourceAddress"
                    },
                    "type": "array",
                    "description": "Extra source addresses appended to the address specified in the ``source_address`` field. This enables to specify multiple source addresses. The source address selection is determined by :ref:`local_address_selector \u003cenvoy_v3_api_field_config.core.v3.BindConfig.local_address_selector\u003e`."
                },
                "additional_source_addresses": {
                    "items": {
                        "$ref": "#/definitions/envoy.config.core.v3.SocketAddress"
                    },
                    "type": "array",
                    "description": "Deprecated by :ref:`extra_source_addresses \u003cenvoy_v3_api_field_config.core.v3.BindConfig.extra_source_addresses\u003e`"
                },
                "local_address_selector": {
                    "$ref": "#/definitions/envoy.config.core.v3.TypedExtensionConfig",
                    "additionalProperties": true,
                    "description": "Custom local address selector to override the default (i.e. :ref:`DefaultLocalAddressSelector \u003cenvoy_v3_api_msg_config.upstream.local_address_selector.v3.DefaultLocalAddressSelector\u003e`). [#extension-category: envoy.upstream.local_address_selector]"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Bind Config",
            "description": "[#next-free-field: 7]"
        },
        "envoy.config.core.v3.ConfigSource": {
            "properties": {
                "authorities": {
                    "items": {
                        "$ref": "#/definitions/xds.core.v3.Authority"
                    },
                    "type": "array",
                    "description": "Authorities that this config source may be used for. An authority specified in a xdstp:// URL is resolved to a ``ConfigSource`` prior to configuration fetch. This field provides the association between authority name and configuration source. [#not-implemented-hide:]"
                },
                "path": {
                    "type": "string",
                    "description": "Deprecated in favor of ``path_config_source``. Use that field instead."
                },
                "path_config_source": {
                    "$ref": "#/definitions/envoy.config.core.v3.PathConfigSource",
                    "additionalProperties": true,
                    "description": "Local filesystem path configuration source."
                },
                "api_config_source": {
                    "$ref": "#/definitions/envoy.config.core.v3.ApiConfigSource",
                    "additionalProperties": true,
                    "description": "API configuration source."
                },
                "ads": {
                    "$ref": "#/definitions/envoy.config.core.v3.AggregatedConfigSource",
                    "additionalProperties": true,
                    "description": "When set, ADS will be used to fetch resources. The ADS API configuration source in the bootstrap configuration is used."
                },
                "self": {
                    "$ref": "#/definitions/envoy.config.core.v3.SelfConfigSource",
                    "additionalProperties": true,
                    "description": "[#not-implemented-hide:] When set, the client will access the resources from the same server it got the ConfigSource from, although not necessarily from the same stream. This is similar to the :ref:`ads\u003cenvoy_v3_api_field.ConfigSource.ads\u003e` field, except that the client may use a different stream to the same server. As a result, this field can be used for things like LRS that cannot be sent on an ADS stream. It can also be used to link from (e.g.) LDS to RDS on the same server without requiring the management server to know its name or required credentials. [#next-major-version: In xDS v3, consider replacing the ads field with this one, since this field can implicitly mean to use the same stream in the case where the ConfigSource is provided via ADS and the specified data can also be obtained via ADS.]"
                },
                "initial_fetch_timeout": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "description": "When this timeout is specified, Envoy will wait no longer than the specified time for first config response on this xDS subscription during the :ref:`initialization process \u003carch_overview_initialization\u003e`. After reaching the timeout, Envoy will move to the next initialization phase, even if the first config is not delivered yet. The timer is activated when the xDS API subscription starts, and is disarmed on first config update or on error. 0 means no timeout - Envoy will wait indefinitely for the first xDS config (unless another timeout applies). The default is 15s.",
                    "format": "regex"
                },
                "resource_api_version": {
                    "enum": [
                        "AUTO",
                        0,
                        "V2",
                        1,
                        "V3",
                        2
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "[#protodoc-title: Configuration sources]",
                    "description": "[#protodoc-title: Configuration sources]  xDS API and non-xDS services version. This is used to describe both resource and transport protocol versions (in distinct configuration fields)."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Config Source",
            "description": "Configuration for :ref:`listeners \u003cconfig_listeners\u003e`, :ref:`clusters \u003cconfig_cluster_manager\u003e`, :ref:`routes \u003cenvoy_v3_api_msg_config.route.v3.RouteConfiguration\u003e`, :ref:`endpoints \u003carch_overview_service_discovery\u003e` etc. may either be sourced from the filesystem or from an xDS API source. Filesystem configs are watched with inotify for updates. [#next-free-field: 9]"
        },
        "envoy.config.core.v3.DataSource": {
            "properties": {
                "filename": {
                    "minLength": 1,
                    "type": "string",
                    "description": "Local filesystem data source."
                },
                "inline_bytes": {
                    "type": "string",
                    "description": "Bytes inlined in the configuration.",
                    "format": "binary",
                    "binaryEncoding": "base64"
                },
                "inline_string": {
                    "type": "string",
                    "description": "String inlined in the configuration."
                },
                "environment_variable": {
                    "minLength": 1,
                    "type": "string",
                    "description": "Environment variable data source."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Data Source",
            "description": "Data source consisting of a file, an inline value, or an environment variable."
        },
        "envoy.config.core.v3.DnsResolutionConfig": {
            "properties": {
                "resolvers": {
                    "items": {
                        "$ref": "#/definitions/envoy.config.core.v3.Address"
                    },
                    "type": "array",
                    "description": "A list of dns resolver addresses. If specified, the DNS client library will perform resolution via the underlying DNS resolvers. Otherwise, the default system resolvers (e.g., /etc/resolv.conf) will be used."
                },
                "dns_resolver_options": {
                    "$ref": "#/definitions/envoy.config.core.v3.DnsResolverOptions",
                    "additionalProperties": true,
                    "description": "Configuration of DNS resolver option flags which control the behavior of the DNS resolver."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Dns Resolution Config",
            "description": "DNS resolution configuration which includes the underlying dns resolver addresses and options."
        },
        "envoy.config.core.v3.DnsResolverOptions": {
            "properties": {
                "use_tcp_for_dns_lookups": {
                    "type": "boolean",
                    "description": "Use TCP for all DNS queries instead of the default protocol UDP."
                },
                "no_default_search_domain": {
                    "type": "boolean",
                    "description": "Do not use the default search domains; only query hostnames as-is or as aliases."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "[#protodoc-title: Resolver]",
            "description": "[#protodoc-title: Resolver]  Configuration of DNS resolver option flags which control the behavior of the DNS resolver."
        },
        "envoy.config.core.v3.EnvoyInternalAddress": {
            "properties": {
                "server_listener_name": {
                    "type": "string",
                    "description": "Specifies the :ref:`name \u003cenvoy_v3_api_field_config.listener.v3.Listener.name\u003e` of the internal listener."
                },
                "endpoint_id": {
                    "type": "string",
                    "description": "Specifies an endpoint identifier to distinguish between multiple endpoints for the same internal listener in a single upstream pool. Only used in the upstream addresses for tracking changes to individual endpoints. This, for example, may be set to the final destination IP for the target internal listener."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Envoy Internal Address",
            "description": "The address represents an envoy internal listener. [#comment: TODO(asraa): When address available, remove workaround from test/server/server_fuzz_test.cc:30.]"
        },
        "envoy.config.core.v3.EventServiceConfig": {
            "properties": {
                "grpc_service": {
                    "$ref": "#/definitions/envoy.config.core.v3.GrpcService",
                    "additionalProperties": true,
                    "description": "Specifies the gRPC service that hosts the event reporting service."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Event Service Config",
            "description": "[#not-implemented-hide:] Configuration of the event reporting service endpoint."
        },
        "envoy.config.core.v3.ExtensionConfigSource": {
            "properties": {
                "config_source": {
                    "$ref": "#/definitions/envoy.config.core.v3.ConfigSource",
                    "additionalProperties": true
                },
                "default_config": {
                    "properties": {
                        "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. As of May 2023, there are no widely used type server implementations and no plans to implement one. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                        },
                        "value": {
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "binary",
                            "binaryEncoding": "base64"
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Optional default configuration to use as the initial configuration if there is a failure to receive the initial extension configuration or if ``apply_default_config_without_warming`` flag is set."
                },
                "apply_default_config_without_warming": {
                    "type": "boolean",
                    "description": "Use the default config as the initial configuration without warming and waiting for the first discovery response. Requires the default configuration to be supplied."
                },
                "type_urls": {
                    "items": {
                        "type": "string"
                    },
                    "minItems": 1,
                    "type": "array",
                    "description": "A set of permitted extension type URLs. Extension configuration updates are rejected if they do not match any type URL in the set."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Extension Config Source",
            "description": "Configuration source specifier for a late-bound extension configuration. The parent resource is warmed until all the initial extension configurations are received, unless the flag to apply the default configuration is set. Subsequent extension updates are atomic on a per-worker basis. Once an extension configuration is applied to a request or a connection, it remains constant for the duration of processing. If the initial delivery of the extension configuration fails, due to a timeout for example, the optional default configuration is applied. Without a default configuration, the extension is disabled, until an extension configuration is received. The behavior of a disabled extension depends on the context. For example, a filter chain with a disabled extension filter rejects all incoming streams."
        },
        "envoy.config.core.v3.ExtraSourceAddress": {
            "properties": {
                "address": {
                    "$ref": "#/definitions/envoy.config.core.v3.SocketAddress",
                    "additionalProperties": true,
                    "description": "The additional address to bind."
                },
                "socket_options": {
                    "$ref": "#/definitions/envoy.config.core.v3.SocketOptionsOverride",
                    "additionalProperties": true,
                    "description": "Additional socket options that may not be present in Envoy source code or precompiled binaries. If specified, this will override the :ref:`socket_options \u003cenvoy_v3_api_field_config.core.v3.BindConfig.socket_options\u003e` in the BindConfig. If specified with no :ref:`socket_options \u003cenvoy_v3_api_field_config.core.v3.SocketOptionsOverride.socket_options\u003e` or an empty list of :ref:`socket_options \u003cenvoy_v3_api_field_config.core.v3.SocketOptionsOverride.socket_options\u003e`, it means no socket option will apply."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Extra Source Address"
        },
        "envoy.config.core.v3.GrpcService": {
            "properties": {
                "envoy_grpc": {
                    "$ref": "#/definitions/envoy.config.core.v3.GrpcService.EnvoyGrpc",
                    "additionalProperties": true,
                    "description": "Envoy's in-built gRPC client. See the :ref:`gRPC services overview \u003carch_overview_grpc_services\u003e` documentation for discussion on gRPC client selection."
                },
                "google_grpc": {
                    "$ref": "#/definitions/envoy.config.core.v3.GrpcService.GoogleGrpc",
                    "additionalProperties": true,
                    "description": "`Google C++ gRPC client \u003chttps://github.com/grpc/grpc\u003e`_ See the :ref:`gRPC services overview \u003carch_overview_grpc_services\u003e` documentation for discussion on gRPC client selection."
                },
                "timeout": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "description": "The timeout for the gRPC request. This is the timeout for a specific request.",
                    "format": "regex"
                },
                "initial_metadata": {
                    "items": {
                        "$ref": "#/definitions/envoy.config.core.v3.HeaderValue"
                    },
                    "type": "array",
                    "description": "Additional metadata to include in streams initiated to the GrpcService. This can be used for scenarios in which additional ad hoc authorization headers (e.g. ``x-foo-bar: baz-key``) are to be injected. For more information, including details on header value syntax, see the documentation on :ref:`custom request headers \u003cconfig_http_conn_man_headers_custom_request_headers\u003e`."
                },
                "retry_policy": {
                    "$ref": "#/definitions/envoy.config.core.v3.RetryPolicy",
                    "additionalProperties": true,
                    "description": "Optional default retry policy for streams toward the service. If an async stream doesn't have retry policy configured in its stream options, this retry policy is used."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "[#protodoc-title: gRPC services]",
            "description": "[#protodoc-title: gRPC services]  gRPC service configuration. This is used by :ref:`ApiConfigSource \u003cenvoy_v3_api_msg_config.core.v3.ApiConfigSource\u003e` and filter configurations. [#next-free-field: 7]"
        },
        "envoy.config.core.v3.GrpcService.EnvoyGrpc": {
            "properties": {
                "cluster_name": {
                    "minLength": 1,
                    "type": "string",
                    "description": "The name of the upstream gRPC cluster. SSL credentials will be supplied in the :ref:`Cluster \u003cenvoy_v3_api_msg_config.cluster.v3.Cluster\u003e` :ref:`transport_socket \u003cenvoy_v3_api_field_config.cluster.v3.Cluster.transport_socket\u003e`."
                },
                "authority": {
                    "type": "string",
                    "description": "The ``:authority`` header in the grpc request. If this field is not set, the authority header value will be ``cluster_name``. Note that this authority does not override the SNI. The SNI is provided by the transport socket of the cluster."
                },
                "retry_policy": {
                    "$ref": "#/definitions/envoy.config.core.v3.RetryPolicy",
                    "additionalProperties": true,
                    "description": "Indicates the retry policy for re-establishing the gRPC stream This field is optional. If max interval is not provided, it will be set to ten times the provided base interval. Currently only supported for xDS gRPC streams. If not set, xDS gRPC streams default base interval:500ms, maximum interval:30s will be applied."
                },
                "max_receive_message_length": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "Maximum gRPC message size that is allowed to be received. If a message over this limit is received, the gRPC stream is terminated with the RESOURCE_EXHAUSTED error. This limit is applied to individual messages in the streaming response and not the total size of streaming response. Defaults to 0, which means unlimited."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Envoy Grpc"
        },
        "envoy.config.core.v3.GrpcService.GoogleGrpc": {
            "properties": {
                "target_uri": {
                    "minLength": 1,
                    "type": "string",
                    "description": "The target URI when using the `Google C++ gRPC client \u003chttps://github.com/grpc/grpc\u003e`_. SSL credentials will be supplied in :ref:`channel_credentials \u003cenvoy_v3_api_field_config.core.v3.GrpcService.GoogleGrpc.channel_credentials\u003e`."
                },
                "channel_credentials": {
                    "$ref": "#/definitions/envoy.config.core.v3.GrpcService.GoogleGrpc.ChannelCredentials",
                    "additionalProperties": true
                },
                "call_credentials": {
                    "items": {
                        "$ref": "#/definitions/envoy.config.core.v3.GrpcService.GoogleGrpc.CallCredentials"
                    },
                    "type": "array",
                    "description": "A set of call credentials that can be composed with `channel credentials \u003chttps://grpc.io/docs/guides/auth.html#credential-types\u003e`_."
                },
                "stat_prefix": {
                    "minLength": 1,
                    "type": "string",
                    "description": "The human readable prefix to use when emitting statistics for the gRPC service. .. csv-table::    :header: Name, Type, Description    :widths: 1, 1, 2    streams_total, Counter, Total number of streams opened    streams_closed_\u003cgRPC status code\u003e, Counter, Total streams closed with \u003cgRPC status code\u003e"
                },
                "credentials_factory_name": {
                    "type": "string",
                    "description": "The name of the Google gRPC credentials factory to use. This must have been registered with Envoy. If this is empty, a default credentials factory will be used that sets up channel credentials based on other configuration parameters."
                },
                "config": {
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Additional configuration for site-specific customizations of the Google gRPC library."
                },
                "per_stream_buffer_limit_bytes": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "How many bytes each stream can buffer internally. If not set an implementation defined default is applied (1MiB)."
                },
                "channel_args": {
                    "$ref": "#/definitions/envoy.config.core.v3.GrpcService.GoogleGrpc.ChannelArgs",
                    "additionalProperties": true,
                    "description": "Custom channels args."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Google Grpc",
            "description": "[#next-free-field: 9]"
        },
        "envoy.config.core.v3.GrpcService.GoogleGrpc.CallCredentials": {
            "properties": {
                "access_token": {
                    "type": "string",
                    "description": "Access token credentials. https://grpc.io/grpc/cpp/namespacegrpc.html#ad3a80da696ffdaea943f0f858d7a360d."
                },
                "google_compute_engine": {
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Google Compute Engine credentials. https://grpc.io/grpc/cpp/namespacegrpc.html#a6beb3ac70ff94bd2ebbd89b8f21d1f61"
                },
                "google_refresh_token": {
                    "type": "string",
                    "description": "Google refresh token credentials. https://grpc.io/grpc/cpp/namespacegrpc.html#a96901c997b91bc6513b08491e0dca37c."
                },
                "service_account_jwt_access": {
                    "$ref": "#/definitions/envoy.config.core.v3.GrpcService.GoogleGrpc.CallCredentials.ServiceAccountJWTAccessCredentials",
                    "additionalProperties": true,
                    "description": "Service Account JWT Access credentials. https://grpc.io/grpc/cpp/namespacegrpc.html#a92a9f959d6102461f66ee973d8e9d3aa."
                },
                "google_iam": {
                    "$ref": "#/definitions/envoy.config.core.v3.GrpcService.GoogleGrpc.CallCredentials.GoogleIAMCredentials",
                    "additionalProperties": true,
                    "description": "Google IAM credentials. https://grpc.io/grpc/cpp/namespacegrpc.html#a9fc1fc101b41e680d47028166e76f9d0."
                },
                "from_plugin": {
                    "$ref": "#/definitions/envoy.config.core.v3.GrpcService.GoogleGrpc.CallCredentials.MetadataCredentialsFromPlugin",
                    "additionalProperties": true,
                    "description": "Custom authenticator credentials. https://grpc.io/grpc/cpp/namespacegrpc.html#a823c6a4b19ffc71fb33e90154ee2ad07. https://grpc.io/docs/guides/auth.html#extending-grpc-to-support-other-authentication-mechanisms."
                },
                "sts_service": {
                    "$ref": "#/definitions/envoy.config.core.v3.GrpcService.GoogleGrpc.CallCredentials.StsService",
                    "additionalProperties": true,
                    "description": "Custom security token service which implements OAuth 2.0 token exchange. https://tools.ietf.org/html/draft-ietf-oauth-token-exchange-16 See https://github.com/grpc/grpc/pull/19587."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Call Credentials",
            "description": "[#next-free-field: 8]"
        },
        "envoy.config.core.v3.GrpcService.GoogleGrpc.CallCredentials.GoogleIAMCredentials": {
            "properties": {
                "authorization_token": {
                    "type": "string"
                },
                "authority_selector": {
                    "type": "string"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Google IAM Credentials"
        },
        "envoy.config.core.v3.GrpcService.GoogleGrpc.CallCredentials.MetadataCredentialsFromPlugin": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "typed_config": {
                    "properties": {
                        "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. As of May 2023, there are no widely used type server implementations and no plans to implement one. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                        },
                        "value": {
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "binary",
                            "binaryEncoding": "base64"
                        }
                    },
                    "additionalProperties": true,
                    "type": "object"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Metadata Credentials From Plugin"
        },
        "envoy.config.core.v3.GrpcService.GoogleGrpc.CallCredentials.ServiceAccountJWTAccessCredentials": {
            "properties": {
                "json_key": {
                    "type": "string"
                },
                "token_lifetime_seconds": {
                    "type": "string"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Service Account JWT Access Credentials"
        },
        "envoy.config.core.v3.GrpcService.GoogleGrpc.CallCredentials.StsService": {
            "properties": {
                "token_exchange_service_uri": {
                    "type": "string",
                    "description": "URI of the token exchange service that handles token exchange requests. [#comment:TODO(asraa): Add URI validation when implemented. Tracked by https://github.com/bufbuild/protoc-gen-validate/issues/303]"
                },
                "resource": {
                    "type": "string",
                    "description": "Location of the target service or resource where the client intends to use the requested security token."
                },
                "audience": {
                    "type": "string",
                    "description": "Logical name of the target service where the client intends to use the requested security token."
                },
                "scope": {
                    "type": "string",
                    "description": "The desired scope of the requested security token in the context of the service or resource where the token will be used."
                },
                "requested_token_type": {
                    "type": "string",
                    "description": "Type of the requested security token."
                },
                "subject_token_path": {
                    "minLength": 1,
                    "type": "string",
                    "description": "The path of subject token, a security token that represents the identity of the party on behalf of whom the request is being made."
                },
                "subject_token_type": {
                    "minLength": 1,
                    "type": "string",
                    "description": "Type of the subject token."
                },
                "actor_token_path": {
                    "type": "string",
                    "description": "The path of actor token, a security token that represents the identity of the acting party. The acting party is authorized to use the requested security token and act on behalf of the subject."
                },
                "actor_token_type": {
                    "type": "string",
                    "description": "Type of the actor token."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Sts Service",
            "description": "Security token service configuration that allows Google gRPC to fetch security token from an OAuth 2.0 authorization server. See https://tools.ietf.org/html/draft-ietf-oauth-token-exchange-16 and https://github.com/grpc/grpc/pull/19587. [#next-free-field: 10]"
        },
        "envoy.config.core.v3.GrpcService.GoogleGrpc.ChannelArgs": {
            "properties": {
                "args": {
                    "additionalProperties": {
                        "$ref": "#/definitions/envoy.config.core.v3.GrpcService.GoogleGrpc.ChannelArgs.Value",
                        "additionalProperties": true
                    },
                    "type": "object",
                    "description": "See grpc_types.h GRPC_ARG #defines for keys that work here."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Channel Args",
            "description": "Channel arguments."
        },
        "envoy.config.core.v3.GrpcService.GoogleGrpc.ChannelArgs.Value": {
            "properties": {
                "string_value": {
                    "type": "string"
                },
                "int_value": {
                    "type": "string"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Value"
        },
        "envoy.config.core.v3.GrpcService.GoogleGrpc.ChannelCredentials": {
            "properties": {
                "ssl_credentials": {
                    "$ref": "#/definitions/envoy.config.core.v3.GrpcService.GoogleGrpc.SslCredentials",
                    "additionalProperties": true
                },
                "google_default": {
                    "additionalProperties": true,
                    "type": "object",
                    "description": "https://grpc.io/grpc/cpp/namespacegrpc.html#a6beb3ac70ff94bd2ebbd89b8f21d1f61"
                },
                "local_credentials": {
                    "$ref": "#/definitions/envoy.config.core.v3.GrpcService.GoogleGrpc.GoogleLocalCredentials",
                    "additionalProperties": true
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Channel Credentials",
            "description": "See https://grpc.io/docs/guides/auth.html#credential-types to understand Channel and Call credential types."
        },
        "envoy.config.core.v3.GrpcService.GoogleGrpc.GoogleLocalCredentials": {
            "additionalProperties": true,
            "type": "object",
            "title": "Google Local Credentials",
            "description": "Local channel credentials. Only UDS is supported for now. See https://github.com/grpc/grpc/pull/15909."
        },
        "envoy.config.core.v3.GrpcService.GoogleGrpc.SslCredentials": {
            "properties": {
                "root_certs": {
                    "$ref": "#/definitions/envoy.config.core.v3.DataSource",
                    "additionalProperties": true,
                    "description": "PEM encoded server root certificates."
                },
                "private_key": {
                    "$ref": "#/definitions/envoy.config.core.v3.DataSource",
                    "additionalProperties": true,
                    "description": "PEM encoded client private key."
                },
                "cert_chain": {
                    "$ref": "#/definitions/envoy.config.core.v3.DataSource",
                    "additionalProperties": true,
                    "description": "PEM encoded client certificate chain."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Ssl Credentials",
            "description": "See https://grpc.io/grpc/cpp/structgrpc_1_1_ssl_credentials_options.html."
        },
        "envoy.config.core.v3.HeaderValue": {
            "properties": {
                "key": {
                    "minLength": 1,
                    "type": "string",
                    "description": "Header name."
                },
                "value": {
                    "type": "string",
                    "description": "Header value. The same :ref:`format specifier \u003cconfig_access_log_format\u003e` as used for :ref:`HTTP access logging \u003cconfig_access_log\u003e` applies here, however unknown header values are replaced with the empty string instead of ``-``. Header value is encoded as string. This does not work for non-utf8 characters. Only one of ``value`` or ``raw_value`` can be set."
                },
                "raw_value": {
                    "type": "string",
                    "description": "Header value is encoded as bytes which can support non-utf8 characters. Only one of ``value`` or ``raw_value`` can be set.",
                    "format": "binary",
                    "binaryEncoding": "base64"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Header Value",
            "description": "Header name/value pair."
        },
        "envoy.config.core.v3.HeaderValueOption": {
            "properties": {
                "header": {
                    "$ref": "#/definitions/envoy.config.core.v3.HeaderValue",
                    "additionalProperties": true,
                    "description": "Header name/value pair that this option applies to."
                },
                "append": {
                    "additionalProperties": true,
                    "type": "boolean",
                    "description": "Should the value be appended? If true (default), the value is appended to existing values. Otherwise it replaces any existing values. This field is deprecated and please use :ref:`append_action \u003cenvoy_v3_api_field_config.core.v3.HeaderValueOption.append_action\u003e` as replacement. .. note::   The :ref:`external authorization service \u003cenvoy_v3_api_msg_service.auth.v3.CheckResponse\u003e` and   :ref:`external processor service \u003cenvoy_v3_api_msg_service.ext_proc.v3.ProcessingResponse\u003e` have   default value (``false``) for this field."
                },
                "append_action": {
                    "enum": [
                        "APPEND_IF_EXISTS_OR_ADD",
                        0,
                        "ADD_IF_ABSENT",
                        1,
                        "OVERWRITE_IF_EXISTS_OR_ADD",
                        2,
                        "OVERWRITE_IF_EXISTS",
                        3
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Header Append Action",
                    "description": "Describes the supported actions types for header append action."
                },
                "keep_empty_value": {
                    "type": "boolean",
                    "description": "Is the header value allowed to be empty? If false (default), custom headers with empty values are dropped, otherwise they are added."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Header Value Option",
            "description": "Header name/value pair plus option to control append behavior."
        },
        "envoy.config.core.v3.HealthCheck": {
            "properties": {
                "timeout": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "description": "The time to wait for a health check response. If the timeout is reached the health check attempt will be considered a failure.",
                    "format": "regex"
                },
                "interval": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "description": "The interval between health checks.",
                    "format": "regex"
                },
                "initial_jitter": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "description": "An optional jitter amount in milliseconds. If specified, Envoy will start health checking after for a random time in ms between 0 and initial_jitter. This only applies to the first health check.",
                    "format": "regex"
                },
                "interval_jitter": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "description": "An optional jitter amount in milliseconds. If specified, during every interval Envoy will add interval_jitter to the wait time.",
                    "format": "regex"
                },
                "interval_jitter_percent": {
                    "type": "integer",
                    "description": "An optional jitter amount as a percentage of interval_ms. If specified, during every interval Envoy will add ``interval_ms`` * ``interval_jitter_percent`` / 100 to the wait time. If interval_jitter_ms and interval_jitter_percent are both set, both of them will be used to increase the wait time."
                },
                "unhealthy_threshold": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "The number of unhealthy health checks required before a host is marked unhealthy. Note that for ``http`` health checking if a host responds with a code not in :ref:`expected_statuses \u003cenvoy_v3_api_field_config.core.v3.HealthCheck.HttpHealthCheck.expected_statuses\u003e` or :ref:`retriable_statuses \u003cenvoy_v3_api_field_config.core.v3.HealthCheck.HttpHealthCheck.retriable_statuses\u003e`, this threshold is ignored and the host is considered immediately unhealthy."
                },
                "healthy_threshold": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "The number of healthy health checks required before a host is marked healthy. Note that during startup, only a single successful health check is required to mark a host healthy."
                },
                "alt_port": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "[#not-implemented-hide:] Non-serving port for health checking."
                },
                "reuse_connection": {
                    "additionalProperties": true,
                    "type": "boolean",
                    "description": "Reuse health check connection between health checks. Default is true."
                },
                "http_health_check": {
                    "$ref": "#/definitions/envoy.config.core.v3.HealthCheck.HttpHealthCheck",
                    "additionalProperties": true,
                    "description": "HTTP health check."
                },
                "tcp_health_check": {
                    "$ref": "#/definitions/envoy.config.core.v3.HealthCheck.TcpHealthCheck",
                    "additionalProperties": true,
                    "description": "TCP health check."
                },
                "grpc_health_check": {
                    "$ref": "#/definitions/envoy.config.core.v3.HealthCheck.GrpcHealthCheck",
                    "additionalProperties": true,
                    "description": "gRPC health check."
                },
                "custom_health_check": {
                    "$ref": "#/definitions/envoy.config.core.v3.HealthCheck.CustomHealthCheck",
                    "additionalProperties": true,
                    "description": "Custom health check."
                },
                "no_traffic_interval": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "description": "The \"no traffic interval\" is a special health check interval that is used when a cluster has never had traffic routed to it. This lower interval allows cluster information to be kept up to date, without sending a potentially large amount of active health checking traffic for no reason. Once a cluster has been used for traffic routing, Envoy will shift back to using the standard health check interval that is defined. Note that this interval takes precedence over any other. The default value for \"no traffic interval\" is 60 seconds.",
                    "format": "regex"
                },
                "no_traffic_healthy_interval": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "description": "The \"no traffic healthy interval\" is a special health check interval that is used for hosts that are currently passing active health checking (including new hosts) when the cluster has received no traffic. This is useful for when we want to send frequent health checks with ``no_traffic_interval`` but then revert to lower frequency ``no_traffic_healthy_interval`` once a host in the cluster is marked as healthy. Once a cluster has been used for traffic routing, Envoy will shift back to using the standard health check interval that is defined. If no_traffic_healthy_interval is not set, it will default to the no traffic interval and send that interval regardless of health state.",
                    "format": "regex"
                },
                "unhealthy_interval": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "description": "The \"unhealthy interval\" is a health check interval that is used for hosts that are marked as unhealthy. As soon as the host is marked as healthy, Envoy will shift back to using the standard health check interval that is defined. The default value for \"unhealthy interval\" is the same as \"interval\".",
                    "format": "regex"
                },
                "unhealthy_edge_interval": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "description": "The \"unhealthy edge interval\" is a special health check interval that is used for the first health check right after a host is marked as unhealthy. For subsequent health checks Envoy will shift back to using either \"unhealthy interval\" if present or the standard health check interval that is defined. The default value for \"unhealthy edge interval\" is the same as \"unhealthy interval\".",
                    "format": "regex"
                },
                "healthy_edge_interval": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "description": "The \"healthy edge interval\" is a special health check interval that is used for the first health check right after a host is marked as healthy. For subsequent health checks Envoy will shift back to using the standard health check interval that is defined. The default value for \"healthy edge interval\" is the same as the default interval.",
                    "format": "regex"
                },
                "event_log_path": {
                    "type": "string",
                    "description": ".. attention:: This field is deprecated in favor of the extension :ref:`event_logger \u003cenvoy_v3_api_field_config.core.v3.HealthCheck.event_logger\u003e` and :ref:`event_log_path \u003cenvoy_v3_api_field_extensions.health_check.event_sinks.file.v3.HealthCheckEventFileSink.event_log_path\u003e` in the file sink extension. Specifies the path to the :ref:`health check event log \u003carch_overview_health_check_logging\u003e`."
                },
                "event_logger": {
                    "items": {
                        "$ref": "#/definitions/envoy.config.core.v3.TypedExtensionConfig"
                    },
                    "type": "array",
                    "description": "A list of event log sinks to process the health check event. [#extension-category: envoy.health_check.event_sinks]"
                },
                "event_service": {
                    "$ref": "#/definitions/envoy.config.core.v3.EventServiceConfig",
                    "additionalProperties": true,
                    "description": "[#not-implemented-hide:] The gRPC service for the health check event service. If empty, health check events won't be sent to a remote endpoint."
                },
                "always_log_health_check_failures": {
                    "type": "boolean",
                    "description": "If set to true, health check failure events will always be logged. If set to false, only the initial health check failure event will be logged. The default value is false."
                },
                "always_log_health_check_success": {
                    "type": "boolean",
                    "description": "If set to true, health check success events will always be logged. If set to false, only host addition event will be logged if it is the first successful health check, or if the healthy threshold is reached. The default value is false."
                },
                "tls_options": {
                    "$ref": "#/definitions/envoy.config.core.v3.HealthCheck.TlsOptions",
                    "additionalProperties": true,
                    "description": "This allows overriding the cluster TLS settings, just for health check connections."
                },
                "transport_socket_match_criteria": {
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Optional key/value pairs that will be used to match a transport socket from those specified in the cluster's :ref:`tranport socket matches \u003cenvoy_v3_api_field_config.cluster.v3.Cluster.transport_socket_matches\u003e`. For example, the following match criteria .. code-block:: yaml  transport_socket_match_criteria:    useMTLS: true Will match the following :ref:`cluster socket match \u003cenvoy_v3_api_msg_config.cluster.v3.Cluster.TransportSocketMatch\u003e` .. code-block:: yaml  transport_socket_matches:  - name: \"useMTLS\"    match:      useMTLS: true    transport_socket:      name: envoy.transport_sockets.tls      config: { ... } # tls socket configuration If this field is set, then for health checks it will supersede an entry of ``envoy.transport_socket`` in the :ref:`LbEndpoint.Metadata \u003cenvoy_v3_api_field_config.endpoint.v3.LbEndpoint.metadata\u003e`. This allows using different transport socket capabilities for health checking versus proxying to the endpoint. If the key/values pairs specified do not match any :ref:`transport socket matches \u003cenvoy_v3_api_field_config.cluster.v3.Cluster.transport_socket_matches\u003e`, the cluster's :ref:`transport socket \u003cenvoy_v3_api_field_config.cluster.v3.Cluster.transport_socket\u003e` will be used for health check socket configuration."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Health Check",
            "description": "[#next-free-field: 27]"
        },
        "envoy.config.core.v3.HealthCheck.CustomHealthCheck": {
            "properties": {
                "name": {
                    "minLength": 1,
                    "type": "string",
                    "description": "The registered name of the custom health checker."
                },
                "typed_config": {
                    "properties": {
                        "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. As of May 2023, there are no widely used type server implementations and no plans to implement one. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                        },
                        "value": {
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "binary",
                            "binaryEncoding": "base64"
                        }
                    },
                    "additionalProperties": true,
                    "type": "object"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Custom Health Check",
            "description": "Custom health check."
        },
        "envoy.config.core.v3.HealthCheck.GrpcHealthCheck": {
            "properties": {
                "service_name": {
                    "type": "string",
                    "description": "An optional service name parameter which will be sent to gRPC service in `grpc.health.v1.HealthCheckRequest \u003chttps://github.com/grpc/grpc/blob/master/src/proto/grpc/health/v1/health.proto#L20\u003e`_. message. See `gRPC health-checking overview \u003chttps://github.com/grpc/grpc/blob/master/doc/health-checking.md\u003e`_ for more information."
                },
                "authority": {
                    "type": "string",
                    "description": "The value of the :authority header in the gRPC health check request. If left empty (default value), the name of the cluster this health check is associated with will be used. The authority header can be customized for a specific endpoint by setting the :ref:`hostname \u003cenvoy_v3_api_field_config.endpoint.v3.Endpoint.HealthCheckConfig.hostname\u003e` field."
                },
                "initial_metadata": {
                    "items": {
                        "$ref": "#/definitions/envoy.config.core.v3.HeaderValueOption"
                    },
                    "type": "array",
                    "description": "Specifies a list of key-value pairs that should be added to the metadata of each GRPC call that is sent to the health checked cluster. For more information, including details on header value syntax, see the documentation on :ref:`custom request headers \u003cconfig_http_conn_man_headers_custom_request_headers\u003e`."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Grpc Health Check",
            "description": "`grpc.health.v1.Health \u003chttps://github.com/grpc/grpc/blob/master/src/proto/grpc/health/v1/health.proto\u003e`_-based healthcheck. See `gRPC doc \u003chttps://github.com/grpc/grpc/blob/master/doc/health-checking.md\u003e`_ for details."
        },
        "envoy.config.core.v3.HealthCheck.HttpHealthCheck": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "The value of the host header in the HTTP health check request. If left empty (default value), the name of the cluster this health check is associated with will be used. The host header can be customized for a specific endpoint by setting the :ref:`hostname \u003cenvoy_v3_api_field_config.endpoint.v3.Endpoint.HealthCheckConfig.hostname\u003e` field."
                },
                "path": {
                    "minLength": 1,
                    "type": "string",
                    "description": "Specifies the HTTP path that will be requested during health checking. For example ``/healthcheck``."
                },
                "send": {
                    "$ref": "#/definitions/envoy.config.core.v3.HealthCheck.Payload",
                    "additionalProperties": true,
                    "description": "[#not-implemented-hide:] HTTP specific payload."
                },
                "receive": {
                    "items": {
                        "$ref": "#/definitions/envoy.config.core.v3.HealthCheck.Payload"
                    },
                    "type": "array",
                    "description": "Specifies a list of HTTP expected responses to match in the first ``response_buffer_size`` bytes of the response body. If it is set, both the expected response check and status code determine the health check. When checking the response, “fuzzy” matching is performed such that each payload block must be found, and in the order specified, but not necessarily contiguous. .. note::   It is recommended to set ``response_buffer_size`` based on the total Payload size for efficiency.   The default buffer size is 1024 bytes when it is not set."
                },
                "response_buffer_size": {
                    "additionalProperties": true,
                    "type": "string",
                    "description": "Specifies the size of response buffer in bytes that is used to Payload match. The default value is 1024. Setting to 0 implies that the Payload will be matched against the entire response."
                },
                "request_headers_to_add": {
                    "items": {
                        "$ref": "#/definitions/envoy.config.core.v3.HeaderValueOption"
                    },
                    "type": "array",
                    "description": "Specifies a list of HTTP headers that should be added to each request that is sent to the health checked cluster. For more information, including details on header value syntax, see the documentation on :ref:`custom request headers \u003cconfig_http_conn_man_headers_custom_request_headers\u003e`."
                },
                "request_headers_to_remove": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "Specifies a list of HTTP headers that should be removed from each request that is sent to the health checked cluster."
                },
                "expected_statuses": {
                    "items": {
                        "$ref": "#/definitions/envoy.type.v3.Int64Range"
                    },
                    "type": "array",
                    "description": "Specifies a list of HTTP response statuses considered healthy. If provided, replaces default 200-only policy - 200 must be included explicitly as needed. Ranges follow half-open semantics of :ref:`Int64Range \u003cenvoy_v3_api_msg_type.v3.Int64Range\u003e`. The start and end of each range are required. Only statuses in the range [100, 600) are allowed."
                },
                "retriable_statuses": {
                    "items": {
                        "$ref": "#/definitions/envoy.type.v3.Int64Range"
                    },
                    "type": "array",
                    "description": "Specifies a list of HTTP response statuses considered retriable. If provided, responses in this range will count towards the configured :ref:`unhealthy_threshold \u003cenvoy_v3_api_field_config.core.v3.HealthCheck.unhealthy_threshold\u003e`, but will not result in the host being considered immediately unhealthy. Ranges follow half-open semantics of :ref:`Int64Range \u003cenvoy_v3_api_msg_type.v3.Int64Range\u003e`. The start and end of each range are required. Only statuses in the range [100, 600) are allowed. The :ref:`expected_statuses \u003cenvoy_v3_api_field_config.core.v3.HealthCheck.HttpHealthCheck.expected_statuses\u003e` field takes precedence for any range overlaps with this field i.e. if status code 200 is both retriable and expected, a 200 response will be considered a successful health check. By default all responses not in :ref:`expected_statuses \u003cenvoy_v3_api_field_config.core.v3.HealthCheck.HttpHealthCheck.expected_statuses\u003e` will result in the host being considered immediately unhealthy i.e. if status code 200 is expected and there are no configured retriable statuses, any non-200 response will result in the host being marked unhealthy."
                },
                "codec_client_type": {
                    "enum": [
                        "HTTP1",
                        0,
                        "HTTP2",
                        1,
                        "HTTP3",
                        2
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "[#protodoc-title: HTTP]",
                    "description": "[#protodoc-title: HTTP]"
                },
                "service_name_matcher": {
                    "$ref": "#/definitions/envoy.type.matcher.v3.StringMatcher",
                    "additionalProperties": true,
                    "description": "An optional service name parameter which is used to validate the identity of the health checked cluster using a :ref:`StringMatcher \u003cenvoy_v3_api_msg_type.matcher.v3.StringMatcher\u003e`. See the :ref:`architecture overview \u003carch_overview_health_checking_identity\u003e` for more information."
                },
                "method": {
                    "enum": [
                        "METHOD_UNSPECIFIED",
                        0,
                        "GET",
                        1,
                        "HEAD",
                        2,
                        "POST",
                        3,
                        "PUT",
                        4,
                        "DELETE",
                        5,
                        "CONNECT",
                        6,
                        "OPTIONS",
                        7,
                        "TRACE",
                        8,
                        "PATCH",
                        9
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Request Method",
                    "description": "HTTP request method."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Http Health Check",
            "description": "[#next-free-field: 15]"
        },
        "envoy.config.core.v3.HealthCheck.Payload": {
            "properties": {
                "text": {
                    "minLength": 1,
                    "type": "string",
                    "description": "Hex encoded payload. E.g., \"000000FF\"."
                },
                "binary": {
                    "type": "string",
                    "description": "Binary payload.",
                    "format": "binary",
                    "binaryEncoding": "base64"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Payload",
            "description": "Describes the encoding of the payload bytes in the payload."
        },
        "envoy.config.core.v3.HealthCheck.TcpHealthCheck": {
            "properties": {
                "send": {
                    "$ref": "#/definitions/envoy.config.core.v3.HealthCheck.Payload",
                    "additionalProperties": true,
                    "description": "Empty payloads imply a connect-only health check."
                },
                "receive": {
                    "items": {
                        "$ref": "#/definitions/envoy.config.core.v3.HealthCheck.Payload"
                    },
                    "type": "array",
                    "description": "When checking the response, “fuzzy” matching is performed such that each payload block must be found, and in the order specified, but not necessarily contiguous."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Tcp Health Check"
        },
        "envoy.config.core.v3.HealthCheck.TlsOptions": {
            "properties": {
                "alpn_protocols": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "Specifies the ALPN protocols for health check connections. This is useful if the corresponding upstream is using ALPN-based :ref:`FilterChainMatch \u003cenvoy_v3_api_msg_config.listener.v3.FilterChainMatch\u003e` along with different protocols for health checks versus data connections. If empty, no ALPN protocols will be set on health check connections."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Tls Options",
            "description": "Health checks occur over the transport socket specified for the cluster. This implies that if a cluster is using a TLS-enabled transport socket, the health check will also occur over TLS. This allows overriding the cluster TLS settings, just for health check connections."
        },
        "envoy.config.core.v3.HealthStatusSet": {
            "properties": {
                "statuses": {
                    "items": {
                        "enum": [
                            "UNKNOWN",
                            0,
                            "HEALTHY",
                            1,
                            "UNHEALTHY",
                            2,
                            "DRAINING",
                            3,
                            "TIMEOUT",
                            4,
                            "DEGRADED",
                            5
                        ]
                    },
                    "type": "array",
                    "title": "[#protodoc-title: Health check]\n * Health checking :ref:`architecture overview \u003carch_overview_health_checking\u003e`.\n * If health checking is configured for a cluster, additional statistics are emitted. They are\n   documented :ref:`here \u003cconfig_cluster_manager_cluster_stats\u003e`.",
                    "description": "[#protodoc-title: Health check] * Health checking :ref:`architecture overview \u003carch_overview_health_checking\u003e`. * If health checking is configured for a cluster, additional statistics are emitted. They are   documented :ref:`here \u003cconfig_cluster_manager_cluster_stats\u003e`.  Endpoint health status."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Health Status Set"
        },
        "envoy.config.core.v3.Http1ProtocolOptions": {
            "properties": {
                "allow_absolute_url": {
                    "additionalProperties": true,
                    "type": "boolean",
                    "description": "Handle HTTP requests with absolute URLs in the requests. These requests are generally sent by clients to forward/explicit proxies. This allows clients to configure envoy as their HTTP proxy. In Unix, for example, this is typically done by setting the ``http_proxy`` environment variable."
                },
                "accept_http_10": {
                    "type": "boolean",
                    "description": "Handle incoming HTTP/1.0 and HTTP 0.9 requests. This is off by default, and not fully standards compliant. There is support for pre-HTTP/1.1 style connect logic, dechunking, and handling lack of client host iff ``default_host_for_http_10`` is configured."
                },
                "default_host_for_http_10": {
                    "type": "string",
                    "description": "A default host for HTTP/1.0 requests. This is highly suggested if ``accept_http_10`` is true as Envoy does not otherwise support HTTP/1.0 without a Host header. This is a no-op if ``accept_http_10`` is not true."
                },
                "header_key_format": {
                    "$ref": "#/definitions/envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat",
                    "additionalProperties": true,
                    "description": "Describes how the keys for response headers should be formatted. By default, all header keys are lower cased."
                },
                "enable_trailers": {
                    "type": "boolean",
                    "description": "Enables trailers for HTTP/1. By default the HTTP/1 codec drops proxied trailers. .. attention::   Note that this only happens when Envoy is chunk encoding which occurs when:   - The request is HTTP/1.1.   - Is neither a HEAD only request nor a HTTP Upgrade.   - Not a response to a HEAD request.   - The content length header is not present."
                },
                "allow_chunked_length": {
                    "type": "boolean",
                    "description": "Allows Envoy to process requests/responses with both ``Content-Length`` and ``Transfer-Encoding`` headers set. By default such messages are rejected, but if option is enabled - Envoy will remove Content-Length header and process message. See `RFC7230, sec. 3.3.3 \u003chttps://tools.ietf.org/html/rfc7230#section-3.3.3\u003e`_ for details. .. attention::   Enabling this option might lead to request smuggling vulnerability, especially if traffic   is proxied via multiple layers of proxies. [#comment:TODO: This field is ignored when the :ref:`header validation configuration \u003cenvoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.typed_header_validation_config\u003e` is present.]"
                },
                "override_stream_error_on_invalid_http_message": {
                    "additionalProperties": true,
                    "type": "boolean",
                    "description": "Allows invalid HTTP messaging. When this option is false, then Envoy will terminate HTTP/1.1 connections upon receiving an invalid HTTP message. However, when this option is true, then Envoy will leave the HTTP/1.1 connection open where possible. If set, this overrides any HCM :ref:`stream_error_on_invalid_http_messaging \u003cenvoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message\u003e`."
                },
                "send_fully_qualified_url": {
                    "type": "boolean",
                    "description": "Allows sending fully qualified URLs when proxying the first line of the response. By default, Envoy will only send the path components in the first line. If this is true, Envoy will create a fully qualified URI composing scheme (inferred if not present), host (from the host/:authority header) and path (from first line or :path header)."
                },
                "use_balsa_parser": {
                    "additionalProperties": true,
                    "type": "boolean",
                    "description": "[#not-implemented-hide:] Hiding so that field can be removed after BalsaParser is rolled out. If set, force HTTP/1 parser: BalsaParser if true, http-parser if false. If unset, HTTP/1 parser is selected based on envoy.reloadable_features.http1_use_balsa_parser. See issue #21245."
                },
                "allow_custom_methods": {
                    "type": "boolean",
                    "description": "[#not-implemented-hide:] Hiding so that field can be removed. If true, and BalsaParser is used (either `use_balsa_parser` above is true, or `envoy.reloadable_features.http1_use_balsa_parser` is true and `use_balsa_parser` is unset), then every non-empty method with only valid characters is accepted. Otherwise, methods not on the hard-coded list are rejected. Once UHV is enabled, this field should be removed, and BalsaParser should allow any method. UHV validates the method, rejecting empty string or invalid characters, and provides :ref:`restrict_http_methods \u003cenvoy_v3_api_field_extensions.http.header_validators.envoy_default.v3.HeaderValidatorConfig.restrict_http_methods\u003e` to reject custom methods."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Http 1 Protocol Options",
            "description": "[#next-free-field: 11]"
        },
        "envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat": {
            "properties": {
                "proper_case_words": {
                    "$ref": "#/definitions/envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords",
                    "additionalProperties": true,
                    "description": "Formats the header by proper casing words: the first character and any character following a special character will be capitalized if it's an alpha character. For example, \"content-type\" becomes \"Content-Type\", and \"foo$b#$are\" becomes \"Foo$B#$Are\". Note that while this results in most headers following conventional casing, certain headers are not covered. For example, the \"TE\" header will be formatted as \"Te\"."
                },
                "stateful_formatter": {
                    "$ref": "#/definitions/envoy.config.core.v3.TypedExtensionConfig",
                    "additionalProperties": true,
                    "description": "Configuration for stateful formatter extensions that allow using received headers to affect the output of encoding headers. E.g., preserving case during proxying. [#extension-category: envoy.http.stateful_header_formatters]"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Header Key Format",
            "description": "[#next-free-field: 9]"
        },
        "envoy.config.core.v3.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords": {
            "additionalProperties": true,
            "type": "object",
            "title": "Proper Case Words"
        },
        "envoy.config.core.v3.Http2ProtocolOptions": {
            "properties": {
                "hpack_table_size": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "`Maximum table size \u003chttps://httpwg.org/specs/rfc7541.html#rfc.section.4.2\u003e`_ (in octets) that the encoder is permitted to use for the dynamic HPACK table. Valid values range from 0 to 4294967295 (2^32 - 1) and defaults to 4096. 0 effectively disables header compression."
                },
                "max_concurrent_streams": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "`Maximum concurrent streams \u003chttps://httpwg.org/specs/rfc7540.html#rfc.section.5.1.2\u003e`_ allowed for peer on one HTTP/2 connection. Valid values range from 1 to 2147483647 (2^31 - 1) and defaults to 2147483647. For upstream connections, this also limits how many streams Envoy will initiate concurrently on a single connection. If the limit is reached, Envoy may queue requests or establish additional connections (as allowed per circuit breaker limits). This acts as an upper bound: Envoy will lower the max concurrent streams allowed on a given connection based on upstream settings. Config dumps will reflect the configured upper bound, not the per-connection negotiated limits."
                },
                "initial_stream_window_size": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "`Initial stream-level flow-control window \u003chttps://httpwg.org/specs/rfc7540.html#rfc.section.6.9.2\u003e`_ size. Valid values range from 65535 (2^16 - 1, HTTP/2 default) to 2147483647 (2^31 - 1, HTTP/2 maximum) and defaults to 268435456 (256 * 1024 * 1024). NOTE: 65535 is the initial window size from HTTP/2 spec. We only support increasing the default window size now, so it's also the minimum. This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the HTTP/2 codec buffers. Once the buffer reaches this pointer, watermark callbacks will fire to stop the flow of data to the codec buffers."
                },
                "initial_connection_window_size": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "Similar to ``initial_stream_window_size``, but for connection-level flow-control window. Currently, this has the same minimum/maximum/default as ``initial_stream_window_size``."
                },
                "allow_connect": {
                    "type": "boolean",
                    "description": "Allows proxying Websocket and other upgrades over H2 connect."
                },
                "allow_metadata": {
                    "type": "boolean",
                    "description": "[#not-implemented-hide:] Hiding until Envoy has full metadata support. Still under implementation. DO NOT USE. Allows sending and receiving HTTP/2 METADATA frames. See [metadata docs](https://github.com/envoyproxy/envoy/blob/main/source/docs/h2_metadata.md) for more information."
                },
                "max_outbound_frames": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "Limit the number of pending outbound downstream frames of all types (frames that are waiting to be written into the socket). Exceeding this limit triggers flood mitigation and connection is terminated. The ``http2.outbound_flood`` stat tracks the number of terminated connections due to flood mitigation. The default limit is 10000."
                },
                "max_outbound_control_frames": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "Limit the number of pending outbound downstream frames of types PING, SETTINGS and RST_STREAM, preventing high memory utilization when receiving continuous stream of these frames. Exceeding this limit triggers flood mitigation and connection is terminated. The ``http2.outbound_control_flood`` stat tracks the number of terminated connections due to flood mitigation. The default limit is 1000."
                },
                "max_consecutive_inbound_frames_with_empty_payload": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "Limit the number of consecutive inbound frames of types HEADERS, CONTINUATION and DATA with an empty payload and no end stream flag. Those frames have no legitimate use and are abusive, but might be a result of a broken HTTP/2 implementation. The `http2.inbound_empty_frames_flood`` stat tracks the number of connections terminated due to flood mitigation. Setting this to 0 will terminate connection upon receiving first frame with an empty payload and no end stream flag. The default limit is 1."
                },
                "max_inbound_priority_frames_per_stream": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "Limit the number of inbound PRIORITY frames allowed per each opened stream. If the number of PRIORITY frames received over the lifetime of connection exceeds the value calculated using this formula::   ``max_inbound_priority_frames_per_stream`` * (1 + ``opened_streams``) the connection is terminated. For downstream connections the ``opened_streams`` is incremented when Envoy receives complete response headers from the upstream server. For upstream connection the ``opened_streams`` is incremented when Envoy send the HEADERS frame for a new stream. The ``http2.inbound_priority_frames_flood`` stat tracks the number of connections terminated due to flood mitigation. The default limit is 100."
                },
                "max_inbound_window_update_frames_per_data_frame_sent": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "Limit the number of inbound WINDOW_UPDATE frames allowed per DATA frame sent. If the number of WINDOW_UPDATE frames received over the lifetime of connection exceeds the value calculated using this formula::   5 + 2 * (``opened_streams`` +            ``max_inbound_window_update_frames_per_data_frame_sent`` * ``outbound_data_frames``) the connection is terminated. For downstream connections the ``opened_streams`` is incremented when Envoy receives complete response headers from the upstream server. For upstream connections the ``opened_streams`` is incremented when Envoy sends the HEADERS frame for a new stream. The ``http2.inbound_priority_frames_flood`` stat tracks the number of connections terminated due to flood mitigation. The default max_inbound_window_update_frames_per_data_frame_sent value is 10. Setting this to 1 should be enough to support HTTP/2 implementations with basic flow control, but more complex implementations that try to estimate available bandwidth require at least 2."
                },
                "stream_error_on_invalid_http_messaging": {
                    "type": "boolean",
                    "description": "Allows invalid HTTP messaging and headers. When this option is disabled (default), then the whole HTTP/2 connection is terminated upon receiving invalid HEADERS frame. However, when this option is enabled, only the offending stream is terminated. This is overridden by HCM :ref:`stream_error_on_invalid_http_messaging \u003cenvoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message\u003e` iff present. This is deprecated in favor of :ref:`override_stream_error_on_invalid_http_message \u003cenvoy_v3_api_field_config.core.v3.Http2ProtocolOptions.override_stream_error_on_invalid_http_message\u003e` See `RFC7540, sec. 8.1 \u003chttps://tools.ietf.org/html/rfc7540#section-8.1\u003e`_ for details."
                },
                "override_stream_error_on_invalid_http_message": {
                    "additionalProperties": true,
                    "type": "boolean",
                    "description": "Allows invalid HTTP messaging and headers. When this option is disabled (default), then the whole HTTP/2 connection is terminated upon receiving invalid HEADERS frame. However, when this option is enabled, only the offending stream is terminated. This overrides any HCM :ref:`stream_error_on_invalid_http_messaging \u003cenvoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message\u003e` See `RFC7540, sec. 8.1 \u003chttps://tools.ietf.org/html/rfc7540#section-8.1\u003e`_ for details."
                },
                "custom_settings_parameters": {
                    "items": {
                        "$ref": "#/definitions/envoy.config.core.v3.Http2ProtocolOptions.SettingsParameter"
                    },
                    "type": "array",
                    "description": "[#not-implemented-hide:] Specifies SETTINGS frame parameters to be sent to the peer, with two exceptions: 1. SETTINGS_ENABLE_PUSH (0x2) is not configurable as HTTP/2 server push is not supported by Envoy. 2. SETTINGS_ENABLE_CONNECT_PROTOCOL (0x8) is only configurable through the named field 'allow_connect'. Note that custom parameters specified through this field can not also be set in the corresponding named parameters: .. code-block:: text   ID    Field Name   ----------------   0x1   hpack_table_size   0x3   max_concurrent_streams   0x4   initial_stream_window_size Collisions will trigger config validation failure on load/update. Likewise, inconsistencies between custom parameters with the same identifier will trigger a failure. See `IANA HTTP/2 Settings \u003chttps://www.iana.org/assignments/http2-parameters/http2-parameters.xhtml#settings\u003e`_ for standardized identifiers."
                },
                "connection_keepalive": {
                    "$ref": "#/definitions/envoy.config.core.v3.KeepaliveSettings",
                    "additionalProperties": true,
                    "description": "Send HTTP/2 PING frames to verify that the connection is still healthy. If the remote peer does not respond within the configured timeout, the connection will be aborted."
                },
                "use_oghttp2_codec": {
                    "additionalProperties": true,
                    "type": "boolean",
                    "description": "[#not-implemented-hide:] Hiding so that the field can be removed after oghttp2 is rolled out. If set, force use of a particular HTTP/2 codec: oghttp2 if true, nghttp2 if false. If unset, HTTP/2 codec is selected based on envoy.reloadable_features.http2_use_oghttp2."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Http 2 Protocol Options",
            "description": "[#next-free-field: 17]"
        },
        "envoy.config.core.v3.Http2ProtocolOptions.SettingsParameter": {
            "properties": {
                "identifier": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "The 16 bit parameter identifier."
                },
                "value": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "The 32 bit parameter value."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Settings Parameter",
            "description": "Defines a parameter to be sent in the SETTINGS frame. See `RFC7540, sec. 6.5.1 \u003chttps://tools.ietf.org/html/rfc7540#section-6.5.1\u003e`_ for details."
        },
        "envoy.config.core.v3.HttpProtocolOptions": {
            "properties": {
                "idle_timeout": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "description": "The idle timeout for connections. The idle timeout is defined as the period in which there are no active requests. When the idle timeout is reached the connection will be closed. If the connection is an HTTP/2 downstream connection a drain sequence will occur prior to closing the connection, see :ref:`drain_timeout \u003cenvoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.drain_timeout\u003e`. Note that request based timeouts mean that HTTP/2 PINGs will not keep the connection alive. If not specified, this defaults to 1 hour. To disable idle timeouts explicitly set this to 0. .. warning::   Disabling this timeout has a highly likelihood of yielding connection leaks due to lost TCP   FIN packets, etc. If the :ref:`overload action \u003cconfig_overload_manager_overload_actions\u003e` \"envoy.overload_actions.reduce_timeouts\" is configured, this timeout is scaled for downstream connections according to the value for :ref:`HTTP_DOWNSTREAM_CONNECTION_IDLE \u003cenvoy_v3_api_enum_value_config.overload.v3.ScaleTimersOverloadActionConfig.TimerType.HTTP_DOWNSTREAM_CONNECTION_IDLE\u003e`.",
                    "format": "regex"
                },
                "max_connection_duration": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "description": "The maximum duration of a connection. The duration is defined as a period since a connection was established. If not set, there is no max duration. When max_connection_duration is reached and if there are no active streams, the connection will be closed. If the connection is a downstream connection and there are any active streams, the drain sequence will kick-in, and the connection will be force-closed after the drain period. See :ref:`drain_timeout \u003cenvoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.drain_timeout\u003e`.",
                    "format": "regex"
                },
                "max_headers_count": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "The maximum number of headers. If unconfigured, the default maximum number of request headers allowed is 100. Requests that exceed this limit will receive a 431 response for HTTP/1.x and cause a stream reset for HTTP/2."
                },
                "max_stream_duration": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "description": "Total duration to keep alive an HTTP request/response stream. If the time limit is reached the stream will be reset independent of any other timeouts. If not specified, this value is not set.",
                    "format": "regex"
                },
                "headers_with_underscores_action": {
                    "enum": [
                        "ALLOW",
                        0,
                        "REJECT_REQUEST",
                        1,
                        "DROP_HEADER",
                        2
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Headers With Underscores Action",
                    "description": "Action to take when Envoy receives client request with header names containing underscore characters. Underscore character is allowed in header names by the RFC-7230 and this behavior is implemented as a security measure due to systems that treat '_' and '-' as interchangeable. Envoy by default allows client request headers with underscore characters."
                },
                "max_requests_per_connection": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "Optional maximum requests for both upstream and downstream connections. If not specified, there is no limit. Setting this parameter to 1 will effectively disable keep alive. For HTTP/2 and HTTP/3, due to concurrent stream processing, the limit is approximate."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Http Protocol Options",
            "description": "[#next-free-field: 7]"
        },
        "envoy.config.core.v3.KeepaliveSettings": {
            "properties": {
                "interval": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "description": "Send HTTP/2 PING frames at this period, in order to test that the connection is still alive. If this is zero, interval PINGs will not be sent.",
                    "format": "regex"
                },
                "timeout": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "description": "How long to wait for a response to a keepalive PING. If a response is not received within this time period, the connection will be aborted. Note that in order to prevent the influence of Head-of-line (HOL) blocking the timeout period is extended when *any* frame is received on the connection, under the assumption that if a frame is received the connection is healthy.",
                    "format": "regex"
                },
                "interval_jitter": {
                    "$ref": "#/definitions/envoy.type.v3.Percent",
                    "additionalProperties": true,
                    "description": "A random jitter amount as a percentage of interval that will be added to each interval. A value of zero means there will be no jitter. The default value is 15%."
                },
                "connection_idle_interval": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "description": "If the connection has been idle for this duration, send a HTTP/2 ping ahead of new stream creation, to quickly detect dead connections. If this is zero, this type of PING will not be sent. If an interval ping is outstanding, a second ping will not be sent as the interval ping will determine if the connection is dead. The same feature for HTTP/3 is given by inheritance from QUICHE which uses :ref:`connection idle_timeout \u003cenvoy_v3_api_field_config.listener.v3.QuicProtocolOptions.idle_timeout\u003e` and the current PTO of the connection to decide whether to probe before sending a new request.",
                    "format": "regex"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Keepalive Settings"
        },
        "envoy.config.core.v3.Locality": {
            "properties": {
                "region": {
                    "type": "string",
                    "description": "Region this :ref:`zone \u003cenvoy_v3_api_field_config.core.v3.Locality.zone\u003e` belongs to."
                },
                "zone": {
                    "type": "string",
                    "description": "Defines the local service zone where Envoy is running. Though optional, it should be set if discovery service routing is used and the discovery service exposes :ref:`zone data \u003cenvoy_v3_api_field_config.endpoint.v3.LocalityLbEndpoints.locality\u003e`, either in this message or via :option:`--service-zone`. The meaning of zone is context dependent, e.g. `Availability Zone (AZ) \u003chttps://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html\u003e`_ on AWS, `Zone \u003chttps://cloud.google.com/compute/docs/regions-zones/\u003e`_ on GCP, etc."
                },
                "sub_zone": {
                    "type": "string",
                    "description": "When used for locality of upstream hosts, this field further splits zone into smaller chunks of sub-zones so they can be load balanced independently."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Locality",
            "description": "Identifies location of where either Envoy runs or where upstream hosts run."
        },
        "envoy.config.core.v3.Metadata": {
            "properties": {
                "filter_metadata": {
                    "additionalProperties": {
                        "additionalProperties": true,
                        "type": "object"
                    },
                    "type": "object",
                    "description": "Key is the reverse DNS filter name, e.g. com.acme.widget. The ``envoy.*`` namespace is reserved for Envoy's built-in filters. If both ``filter_metadata`` and :ref:`typed_filter_metadata \u003cenvoy_v3_api_field_config.core.v3.Metadata.typed_filter_metadata\u003e` fields are present in the metadata with same keys, only ``typed_filter_metadata`` field will be parsed."
                },
                "typed_filter_metadata": {
                    "additionalProperties": {
                        "properties": {
                            "type_url": {
                                "type": "string",
                                "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. As of May 2023, there are no widely used type server implementations and no plans to implement one. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                            },
                            "value": {
                                "type": "string",
                                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                                "format": "binary",
                                "binaryEncoding": "base64"
                            }
                        },
                        "additionalProperties": true,
                        "type": "object"
                    },
                    "type": "object",
                    "description": "Key is the reverse DNS filter name, e.g. com.acme.widget. The ``envoy.*`` namespace is reserved for Envoy's built-in filters. The value is encoded as google.protobuf.Any. If both :ref:`filter_metadata \u003cenvoy_v3_api_field_config.core.v3.Metadata.filter_metadata\u003e` and ``typed_filter_metadata`` fields are present in the metadata with same keys, only ``typed_filter_metadata`` field will be parsed."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Metadata",
            "description": "Metadata provides additional inputs to filters based on matched listeners, filter chains, routes and endpoints. It is structured as a map, usually from filter name (in reverse DNS format) to metadata specific to the filter. Metadata key-values for a filter are merged as connection and request handling occurs, with later values for the same key overriding earlier values. An example use of metadata is providing additional values to http_connection_manager in the envoy.http_connection_manager.access_log namespace. Another example use of metadata is to per service config info in cluster metadata, which may get consumed by multiple filters. For load balancing, Metadata provides a means to subset cluster endpoints. Endpoints have a Metadata object associated and routes contain a Metadata object to match against. There are some well defined metadata used today for this purpose: * ``{\"envoy.lb\": {\"canary\": \u003cbool\u003e }}`` This indicates the canary status of an   endpoint and is also used during header processing   (x-envoy-upstream-canary) and for stats purposes. [#next-major-version: move to type/metadata/v2]"
        },
        "envoy.config.core.v3.PathConfigSource": {
            "properties": {
                "path": {
                    "minLength": 1,
                    "type": "string",
                    "description": "Path on the filesystem to source and watch for configuration updates. When sourcing configuration for a :ref:`secret \u003cenvoy_v3_api_msg_extensions.transport_sockets.tls.v3.Secret\u003e`, the certificate and key files are also watched for updates. .. note::  The path to the source must exist at config load time. .. note::   If ``watched_directory`` is *not* configured, Envoy will watch the file path for *moves*.   This is because in general only moves are atomic. The same method of swapping files as is   demonstrated in the :ref:`runtime documentation \u003cconfig_runtime_symbolic_link_swap\u003e` can be   used here also. If ``watched_directory`` is configured, no watch will be placed directly on   this path. Instead, the configured ``watched_directory`` will be used to trigger reloads of   this path. This is required in certain deployment scenarios. See below for more information."
                },
                "watched_directory": {
                    "$ref": "#/definitions/envoy.config.core.v3.WatchedDirectory",
                    "additionalProperties": true,
                    "description": "If configured, this directory will be watched for *moves*. When an entry in this directory is moved to, the ``path`` will be reloaded. This is required in certain deployment scenarios. Specifically, if trying to load an xDS resource using a `Kubernetes ConfigMap \u003chttps://kubernetes.io/docs/concepts/configuration/configmap/\u003e`_, the following configuration might be used: 1. Store xds.yaml inside a ConfigMap. 2. Mount the ConfigMap to ``/config_map/xds`` 3. Configure path ``/config_map/xds/xds.yaml`` 4. Configure watched directory ``/config_map/xds`` The above configuration will ensure that Envoy watches the owning directory for moves which is required due to how Kubernetes manages ConfigMap symbolic links during atomic updates."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Path Config Source",
            "description": "Local filesystem path configuration source."
        },
        "envoy.config.core.v3.Pipe": {
            "properties": {
                "path": {
                    "minLength": 1,
                    "type": "string",
                    "description": "Unix Domain Socket path. On Linux, paths starting with '@' will use the abstract namespace. The starting '@' is replaced by a null byte by Envoy. Paths starting with '@' will result in an error in environments other than Linux."
                },
                "mode": {
                    "type": "integer",
                    "description": "The mode for the Pipe. Not applicable for abstract sockets."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "[#protodoc-title: Network addresses]",
            "description": "[#protodoc-title: Network addresses]"
        },
        "envoy.config.core.v3.RateLimitSettings": {
            "properties": {
                "max_tokens": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "Maximum number of tokens to be used for rate limiting discovery request calls. If not set, a default value of 100 will be used."
                },
                "fill_rate": {
                    "additionalProperties": true,
                    "type": "number",
                    "description": "Rate at which tokens will be filled per second. If not set, a default fill rate of 10 tokens per second will be used. The minimal fill rate is once per year. Lower fill rates will be set to once per year."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Rate Limit Settings",
            "description": "Rate Limit settings to be applied for discovery requests made by Envoy."
        },
        "envoy.config.core.v3.RetryPolicy": {
            "properties": {
                "retry_back_off": {
                    "$ref": "#/definitions/envoy.config.core.v3.BackoffStrategy",
                    "additionalProperties": true,
                    "description": "Specifies parameters that control :ref:`retry backoff strategy \u003cenvoy_v3_api_msg_config.core.v3.BackoffStrategy\u003e`. This parameter is optional, in which case the default base interval is 1000 milliseconds. The default maximum interval is 10 times the base interval."
                },
                "num_retries": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "Specifies the allowed number of retries. This parameter is optional and defaults to 1."
                },
                "retry_on": {
                    "type": "string",
                    "description": "For details, see :ref:`retry_on \u003cenvoy_v3_api_field_config.route.v3.RetryPolicy.retry_on\u003e`."
                },
                "retry_priority": {
                    "$ref": "#/definitions/envoy.config.core.v3.RetryPolicy.RetryPriority",
                    "additionalProperties": true,
                    "description": "For details, see :ref:`retry_priority \u003cenvoy_v3_api_field_config.route.v3.RetryPolicy.retry_priority\u003e`."
                },
                "retry_host_predicate": {
                    "items": {
                        "$ref": "#/definitions/envoy.config.core.v3.RetryPolicy.RetryHostPredicate"
                    },
                    "type": "array",
                    "description": "For details, see :ref:`RetryHostPredicate \u003cenvoy_v3_api_field_config.route.v3.RetryPolicy.retry_host_predicate\u003e`."
                },
                "host_selection_retry_max_attempts": {
                    "type": "string",
                    "description": "For details, see :ref:`host_selection_retry_max_attempts \u003cenvoy_v3_api_field_config.route.v3.RetryPolicy.host_selection_retry_max_attempts\u003e`."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Retry Policy",
            "description": "The message specifies the retry policy of remote data source when fetching fails. [#next-free-field: 7]"
        },
        "envoy.config.core.v3.RetryPolicy.RetryHostPredicate": {
            "properties": {
                "name": {
                    "minLength": 1,
                    "type": "string"
                },
                "typed_config": {
                    "properties": {
                        "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. As of May 2023, there are no widely used type server implementations and no plans to implement one. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                        },
                        "value": {
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "binary",
                            "binaryEncoding": "base64"
                        }
                    },
                    "additionalProperties": true,
                    "type": "object"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Retry Host Predicate",
            "description": "See :ref:`RetryHostPredicate \u003cenvoy_v3_api_field_config.route.v3.RetryPolicy.retry_host_predicate\u003e`."
        },
        "envoy.config.core.v3.RetryPolicy.RetryPriority": {
            "properties": {
                "name": {
                    "minLength": 1,
                    "type": "string"
                },
                "typed_config": {
                    "properties": {
                        "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. As of May 2023, there are no widely used type server implementations and no plans to implement one. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                        },
                        "value": {
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "binary",
                            "binaryEncoding": "base64"
                        }
                    },
                    "additionalProperties": true,
                    "type": "object"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Retry Priority",
            "description": "See :ref:`RetryPriority \u003cenvoy_v3_api_field_config.route.v3.RetryPolicy.retry_priority\u003e`."
        },
        "envoy.config.core.v3.RuntimeDouble": {
            "properties": {
                "default_value": {
                    "type": "number",
                    "description": "Default value if runtime value is not available."
                },
                "runtime_key": {
                    "minLength": 1,
                    "type": "string",
                    "description": "Runtime key to get value for comparison. This value is used if defined."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Runtime Double",
            "description": "Runtime derived double with a default when not specified."
        },
        "envoy.config.core.v3.SelfConfigSource": {
            "properties": {
                "transport_api_version": {
                    "enum": [
                        "AUTO",
                        0,
                        "V2",
                        1,
                        "V3",
                        2
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "[#protodoc-title: Configuration sources]",
                    "description": "[#protodoc-title: Configuration sources]  xDS API and non-xDS services version. This is used to describe both resource and transport protocol versions (in distinct configuration fields)."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Self Config Source",
            "description": "[#not-implemented-hide:] Self-referencing config source options. This is currently empty, but when set in :ref:`ConfigSource \u003cenvoy_v3_api_msg_config.core.v3.ConfigSource\u003e` can be used to specify that other data can be obtained from the same server."
        },
        "envoy.config.core.v3.SocketAddress": {
            "properties": {
                "protocol": {
                    "enum": [
                        "TCP",
                        0,
                        "UDP",
                        1
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Protocol"
                },
                "address": {
                    "minLength": 1,
                    "type": "string",
                    "description": "The address for this socket. :ref:`Listeners \u003cconfig_listeners\u003e` will bind to the address. An empty address is not allowed. Specify ``0.0.0.0`` or ``::`` to bind to any address. [#comment:TODO(zuercher) reinstate when implemented: It is possible to distinguish a Listener address via the prefix/suffix matching in :ref:`FilterChainMatch \u003cenvoy_v3_api_msg_config.listener.v3.FilterChainMatch\u003e`.] When used within an upstream :ref:`BindConfig \u003cenvoy_v3_api_msg_config.core.v3.BindConfig\u003e`, the address controls the source address of outbound connections. For :ref:`clusters \u003cenvoy_v3_api_msg_config.cluster.v3.Cluster\u003e`, the cluster type determines whether the address must be an IP (``STATIC`` or ``EDS`` clusters) or a hostname resolved by DNS (``STRICT_DNS`` or ``LOGICAL_DNS`` clusters). Address resolution can be customized via :ref:`resolver_name \u003cenvoy_v3_api_field_config.core.v3.SocketAddress.resolver_name\u003e`."
                },
                "port_value": {
                    "type": "integer"
                },
                "named_port": {
                    "type": "string",
                    "description": "This is only valid if :ref:`resolver_name \u003cenvoy_v3_api_field_config.core.v3.SocketAddress.resolver_name\u003e` is specified below and the named resolver is capable of named port resolution."
                },
                "resolver_name": {
                    "type": "string",
                    "description": "The name of the custom resolver. This must have been registered with Envoy. If this is empty, a context dependent default applies. If the address is a concrete IP address, no resolution will occur. If address is a hostname this should be set for resolution other than DNS. Specifying a custom resolver with ``STRICT_DNS`` or ``LOGICAL_DNS`` will generate an error at runtime."
                },
                "ipv4_compat": {
                    "type": "boolean",
                    "description": "When binding to an IPv6 address above, this enables `IPv4 compatibility \u003chttps://tools.ietf.org/html/rfc3493#page-11\u003e`_. Binding to ``::`` will allow both IPv4 and IPv6 connections, with peer IPv4 addresses mapped into IPv6 space as ``::FFFF:\u003cIPv4-address\u003e``."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Socket Address",
            "description": "[#next-free-field: 7]"
        },
        "envoy.config.core.v3.SocketOption": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "An optional name to give this socket option for debugging, etc. Uniqueness is not required and no special meaning is assumed."
                },
                "level": {
                    "type": "string",
                    "description": "Corresponding to the level value passed to setsockopt, such as IPPROTO_TCP"
                },
                "name": {
                    "type": "string",
                    "description": "The numeric name as passed to setsockopt"
                },
                "int_value": {
                    "type": "string",
                    "description": "Because many sockopts take an int value."
                },
                "buf_value": {
                    "type": "string",
                    "description": "Otherwise it's a byte buffer.",
                    "format": "binary",
                    "binaryEncoding": "base64"
                },
                "state": {
                    "enum": [
                        "STATE_PREBIND",
                        0,
                        "STATE_BOUND",
                        1,
                        "STATE_LISTENING",
                        2
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Socket State"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "[#protodoc-title: Socket option]",
            "description": "[#protodoc-title: Socket option]  Generic socket option message. This would be used to set socket options that might not exist in upstream kernels or precompiled Envoy binaries. For example: .. code-block:: json  {    \"description\": \"support tcp keep alive\",    \"state\": 0,    \"level\": 1,    \"name\": 9,    \"int_value\": 1,  } 1 means SOL_SOCKET and 9 means SO_KEEPALIVE on Linux. With the above configuration, `TCP Keep-Alives \u003chttps://www.freesoft.org/CIE/RFC/1122/114.htm\u003e`_ can be enabled in socket with Linux, which can be used in :ref:`listener's\u003cenvoy_v3_api_field_config.listener.v3.Listener.socket_options\u003e` or :ref:`admin's \u003cenvoy_v3_api_field_config.bootstrap.v3.Admin.socket_options\u003e` socket_options etc. It should be noted that the name or level may have different values on different platforms. [#next-free-field: 7]"
        },
        "envoy.config.core.v3.SocketOptionsOverride": {
            "properties": {
                "socket_options": {
                    "items": {
                        "$ref": "#/definitions/envoy.config.core.v3.SocketOption"
                    },
                    "type": "array"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Socket Options Override"
        },
        "envoy.config.core.v3.TcpKeepalive": {
            "properties": {
                "keepalive_probes": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "Maximum number of keepalive probes to send without response before deciding the connection is dead. Default is to use the OS level configuration (unless overridden, Linux defaults to 9.)"
                },
                "keepalive_time": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "The number of seconds a connection needs to be idle before keep-alive probes start being sent. Default is to use the OS level configuration (unless overridden, Linux defaults to 7200s (i.e., 2 hours.)"
                },
                "keepalive_interval": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "The number of seconds between keep-alive probes. Default is to use the OS level configuration (unless overridden, Linux defaults to 75s.)"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Tcp Keepalive"
        },
        "envoy.config.core.v3.TransportSocket": {
            "properties": {
                "name": {
                    "minLength": 1,
                    "type": "string",
                    "description": "The name of the transport socket to instantiate. The name must match a supported transport socket implementation."
                },
                "typed_config": {
                    "properties": {
                        "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. As of May 2023, there are no widely used type server implementations and no plans to implement one. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                        },
                        "value": {
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "binary",
                            "binaryEncoding": "base64"
                        }
                    },
                    "additionalProperties": true,
                    "type": "object"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Transport Socket",
            "description": "Configuration for transport socket in :ref:`listeners \u003cconfig_listeners\u003e` and :ref:`clusters \u003cenvoy_v3_api_msg_config.cluster.v3.Cluster\u003e`. If the configuration is empty, a default transport socket implementation and configuration will be chosen based on the platform and existence of tls_context."
        },
        "envoy.config.core.v3.TypedExtensionConfig": {
            "properties": {
                "name": {
                    "minLength": 1,
                    "type": "string",
                    "description": "The name of an extension. This is not used to select the extension, instead it serves the role of an opaque identifier."
                },
                "typed_config": {
                    "properties": {
                        "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. As of May 2023, there are no widely used type server implementations and no plans to implement one. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                        },
                        "value": {
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "binary",
                            "binaryEncoding": "base64"
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "The typed config for the extension. The type URL will be used to identify the extension. In the case that the type URL is ``xds.type.v3.TypedStruct`` (or, for historical reasons, ``udpa.type.v1.TypedStruct``), the inner type URL of ``TypedStruct`` will be utilized. See the :ref:`extension configuration overview \u003cconfig_overview_extension_configuration\u003e` for further details."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "[#protodoc-title: Extension configuration]",
            "description": "[#protodoc-title: Extension configuration]  Message type for extension configuration. [#next-major-version: revisit all existing typed_config that doesn't use this wrapper.]."
        },
        "envoy.config.core.v3.UpstreamHttpProtocolOptions": {
            "properties": {
                "auto_sni": {
                    "type": "boolean",
                    "description": "Set transport socket `SNI \u003chttps://en.wikipedia.org/wiki/Server_Name_Indication\u003e`_ for new upstream connections based on the downstream HTTP host/authority header or any other arbitrary header when :ref:`override_auto_sni_header \u003cenvoy_v3_api_field_config.core.v3.UpstreamHttpProtocolOptions.override_auto_sni_header\u003e` is set, as seen by the :ref:`router filter \u003cconfig_http_filters_router\u003e`. Does nothing if a filter before the http router filter sets the corresponding metadata."
                },
                "auto_san_validation": {
                    "type": "boolean",
                    "description": "Automatic validate upstream presented certificate for new upstream connections based on the downstream HTTP host/authority header or any other arbitrary header when :ref:`override_auto_sni_header \u003cenvoy_v3_api_field_config.core.v3.UpstreamHttpProtocolOptions.override_auto_sni_header\u003e` is set, as seen by the :ref:`router filter \u003cconfig_http_filters_router\u003e`. This field is intended to be set with ``auto_sni`` field. Does nothing if a filter before the http router filter sets the corresponding metadata."
                },
                "override_auto_sni_header": {
                    "type": "string",
                    "description": "An optional alternative to the host/authority header to be used for setting the SNI value. It should be a valid downstream HTTP header, as seen by the :ref:`router filter \u003cconfig_http_filters_router\u003e`. If unset, host/authority header will be used for populating the SNI. If the specified header is not found or the value is empty, host/authority header will be used instead. This field is intended to be set with ``auto_sni`` and/or ``auto_san_validation`` fields. If none of these fields are set then setting this would be a no-op. Does nothing if a filter before the http router filter sets the corresponding metadata."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Upstream Http Protocol Options"
        },
        "envoy.config.core.v3.WatchedDirectory": {
            "properties": {
                "path": {
                    "minLength": 1,
                    "type": "string",
                    "description": "Directory path to watch."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Watched Directory",
            "description": "A directory that is watched for changes, e.g. by inotify on Linux. Move/rename events inside this directory trigger the watch."
        },
        "envoy.config.endpoint.v3.ClusterLoadAssignment": {
            "properties": {
                "cluster_name": {
                    "minLength": 1,
                    "type": "string",
                    "description": "Name of the cluster. This will be the :ref:`service_name \u003cenvoy_v3_api_field_config.cluster.v3.Cluster.EdsClusterConfig.service_name\u003e` value if specified in the cluster :ref:`EdsClusterConfig \u003cenvoy_v3_api_msg_config.cluster.v3.Cluster.EdsClusterConfig\u003e`."
                },
                "endpoints": {
                    "items": {
                        "$ref": "#/definitions/envoy.config.endpoint.v3.LocalityLbEndpoints"
                    },
                    "type": "array",
                    "description": "List of endpoints to load balance to."
                },
                "named_endpoints": {
                    "additionalProperties": {
                        "$ref": "#/definitions/envoy.config.endpoint.v3.Endpoint",
                        "additionalProperties": true
                    },
                    "type": "object",
                    "description": "Map of named endpoints that can be referenced in LocalityLbEndpoints. [#not-implemented-hide:]"
                },
                "policy": {
                    "$ref": "#/definitions/envoy.config.endpoint.v3.ClusterLoadAssignment.Policy",
                    "additionalProperties": true,
                    "description": "Load balancing policy settings."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "[#protodoc-title: Endpoint configuration]\n Endpoint discovery :ref:`architecture overview \u003carch_overview_service_discovery_types_eds\u003e`",
            "description": "[#protodoc-title: Endpoint configuration] Endpoint discovery :ref:`architecture overview \u003carch_overview_service_discovery_types_eds\u003e`  Each route from RDS will map to a single cluster or traffic split across clusters using weights expressed in the RDS WeightedCluster. With EDS, each cluster is treated independently from a LB perspective, with LB taking place between the Localities within a cluster and at a finer granularity between the hosts within a locality. The percentage of traffic for each endpoint is determined by both its load_balancing_weight, and the load_balancing_weight of its locality. First, a locality will be selected, then an endpoint within that locality will be chose based on its weight. [#next-free-field: 6]"
        },
        "envoy.config.endpoint.v3.ClusterLoadAssignment.Policy": {
            "properties": {
                "drop_overloads": {
                    "items": {
                        "$ref": "#/definitions/envoy.config.endpoint.v3.ClusterLoadAssignment.Policy.DropOverload"
                    },
                    "type": "array",
                    "description": "Action to trim the overall incoming traffic to protect the upstream hosts. This action allows protection in case the hosts are unable to recover from an outage, or unable to autoscale or unable to handle incoming traffic volume for any reason. At the client each category is applied one after the other to generate the 'actual' drop percentage on all outgoing traffic. For example: .. code-block:: json  { \"drop_overloads\": [      { \"category\": \"throttle\", \"drop_percentage\": 60 }      { \"category\": \"lb\", \"drop_percentage\": 50 }  ]} The actual drop percentages applied to the traffic at the clients will be    \"throttle\"_drop = 60%    \"lb\"_drop = 20%  // 50% of the remaining 'actual' load, which is 40%.    actual_outgoing_load = 20% // remaining after applying all categories. Envoy supports only one element and will NACK if more than one element is present. Other xDS-capable data planes will not necessarily have this limitation."
                },
                "overprovisioning_factor": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "Priority levels and localities are considered overprovisioned with this factor (in percentage). This means that we don't consider a priority level or locality unhealthy until the fraction of healthy hosts multiplied by the overprovisioning factor drops below 100. With the default value 140(1.4), Envoy doesn't consider a priority level or a locality unhealthy until their percentage of healthy hosts drops below 72%. For example: .. code-block:: json  { \"overprovisioning_factor\": 100 } Read more at :ref:`priority levels \u003carch_overview_load_balancing_priority_levels\u003e` and :ref:`localities \u003carch_overview_load_balancing_locality_weighted_lb\u003e`."
                },
                "endpoint_stale_after": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "description": "The max time until which the endpoints from this assignment can be used. If no new assignments are received before this time expires the endpoints are considered stale and should be marked unhealthy. Defaults to 0 which means endpoints never go stale.",
                    "format": "regex"
                },
                "weighted_priority_health": {
                    "type": "boolean",
                    "description": "If true, use the :ref:`load balancing weight \u003cenvoy_v3_api_field_config.endpoint.v3.LbEndpoint.load_balancing_weight\u003e` of healthy and unhealthy hosts to determine the health of the priority level. If false, use the number of healthy and unhealthy hosts to determine the health of the priority level, or in other words assume each host has a weight of 1 for this calculation. Note: this is not currently implemented for :ref:`locality weighted load balancing \u003carch_overview_load_balancing_locality_weighted_lb\u003e`."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Policy",
            "description": "Load balancing policy settings. [#next-free-field: 7]"
        },
        "envoy.config.endpoint.v3.ClusterLoadAssignment.Policy.DropOverload": {
            "properties": {
                "category": {
                    "minLength": 1,
                    "type": "string",
                    "description": "Identifier for the policy specifying the drop."
                },
                "drop_percentage": {
                    "$ref": "#/definitions/envoy.type.v3.FractionalPercent",
                    "additionalProperties": true,
                    "description": "Percentage of traffic that should be dropped for the category."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Drop Overload"
        },
        "envoy.config.endpoint.v3.Endpoint": {
            "properties": {
                "address": {
                    "$ref": "#/definitions/envoy.config.core.v3.Address",
                    "additionalProperties": true,
                    "description": "The upstream host address. .. attention::   The form of host address depends on the given cluster type. For STATIC or EDS,   it is expected to be a direct IP address (or something resolvable by the   specified :ref:`resolver \u003cenvoy_v3_api_field_config.core.v3.SocketAddress.resolver_name\u003e`   in the Address). For LOGICAL or STRICT DNS, it is expected to be hostname,   and will be resolved via DNS."
                },
                "health_check_config": {
                    "$ref": "#/definitions/envoy.config.endpoint.v3.Endpoint.HealthCheckConfig",
                    "additionalProperties": true,
                    "description": "The optional health check configuration is used as configuration for the health checker to contact the health checked host. .. attention::   This takes into effect only for upstream clusters with   :ref:`active health checking \u003carch_overview_health_checking\u003e` enabled."
                },
                "hostname": {
                    "type": "string",
                    "description": "The hostname associated with this endpoint. This hostname is not used for routing or address resolution. If provided, it will be associated with the endpoint, and can be used for features that require a hostname, like :ref:`auto_host_rewrite \u003cenvoy_v3_api_field_config.route.v3.RouteAction.auto_host_rewrite\u003e`."
                },
                "additional_addresses": {
                    "items": {
                        "$ref": "#/definitions/envoy.config.endpoint.v3.Endpoint.AdditionalAddress"
                    },
                    "type": "array",
                    "description": "An ordered list of addresses that together with ``address`` comprise the list of addresses for an endpoint. The address given in the ``address`` is prepended to this list. It is assumed that the list must already be sorted by preference order of the addresses. This will only be supported for STATIC and EDS clusters."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "[#protodoc-title: Endpoints]",
            "description": "[#protodoc-title: Endpoints]  Upstream host identifier."
        },
        "envoy.config.endpoint.v3.Endpoint.AdditionalAddress": {
            "properties": {
                "address": {
                    "$ref": "#/definitions/envoy.config.core.v3.Address",
                    "additionalProperties": true,
                    "description": "Additional address that is associated with the endpoint."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Additional Address"
        },
        "envoy.config.endpoint.v3.Endpoint.HealthCheckConfig": {
            "properties": {
                "port_value": {
                    "type": "integer",
                    "description": "Optional alternative health check port value. By default the health check address port of an upstream host is the same as the host's serving address port. This provides an alternative health check port. Setting this with a non-zero value allows an upstream host to have different health check address port."
                },
                "hostname": {
                    "type": "string",
                    "description": "By default, the host header for L7 health checks is controlled by cluster level configuration (see: :ref:`host \u003cenvoy_v3_api_field_config.core.v3.HealthCheck.HttpHealthCheck.host\u003e` and :ref:`authority \u003cenvoy_v3_api_field_config.core.v3.HealthCheck.GrpcHealthCheck.authority\u003e`). Setting this to a non-empty value allows overriding the cluster level configuration for a specific endpoint."
                },
                "address": {
                    "$ref": "#/definitions/envoy.config.core.v3.Address",
                    "additionalProperties": true,
                    "description": "Optional alternative health check host address. .. attention::   The form of the health check host address is expected to be a direct IP address."
                },
                "disable_active_health_check": {
                    "type": "boolean",
                    "description": "Optional flag to control if perform active health check for this endpoint. Active health check is enabled by default if there is a health checker."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Health Check Config",
            "description": "The optional health check configuration."
        },
        "envoy.config.endpoint.v3.LbEndpoint": {
            "properties": {
                "endpoint": {
                    "$ref": "#/definitions/envoy.config.endpoint.v3.Endpoint",
                    "additionalProperties": true
                },
                "endpoint_name": {
                    "type": "string",
                    "description": "[#not-implemented-hide:]"
                },
                "health_status": {
                    "enum": [
                        "UNKNOWN",
                        0,
                        "HEALTHY",
                        1,
                        "UNHEALTHY",
                        2,
                        "DRAINING",
                        3,
                        "TIMEOUT",
                        4,
                        "DEGRADED",
                        5
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "[#protodoc-title: Health check]\n * Health checking :ref:`architecture overview \u003carch_overview_health_checking\u003e`.\n * If health checking is configured for a cluster, additional statistics are emitted. They are\n   documented :ref:`here \u003cconfig_cluster_manager_cluster_stats\u003e`.",
                    "description": "[#protodoc-title: Health check] * Health checking :ref:`architecture overview \u003carch_overview_health_checking\u003e`. * If health checking is configured for a cluster, additional statistics are emitted. They are   documented :ref:`here \u003cconfig_cluster_manager_cluster_stats\u003e`.  Endpoint health status."
                },
                "metadata": {
                    "$ref": "#/definitions/envoy.config.core.v3.Metadata",
                    "additionalProperties": true,
                    "description": "The endpoint metadata specifies values that may be used by the load balancer to select endpoints in a cluster for a given request. The filter name should be specified as ``envoy.lb``. An example boolean key-value pair is ``canary``, providing the optional canary status of the upstream host. This may be matched against in a route's :ref:`RouteAction \u003cenvoy_v3_api_msg_config.route.v3.RouteAction\u003e` metadata_match field to subset the endpoints considered in cluster load balancing."
                },
                "load_balancing_weight": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "The optional load balancing weight of the upstream host; at least 1. Envoy uses the load balancing weight in some of the built in load balancers. The load balancing weight for an endpoint is divided by the sum of the weights of all endpoints in the endpoint's locality to produce a percentage of traffic for the endpoint. This percentage is then further weighted by the endpoint's locality's load balancing weight from LocalityLbEndpoints. If unspecified, will be treated as 1. The sum of the weights of all endpoints in the endpoint's locality must not exceed uint32_t maximal value (4294967295)."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Lb Endpoint",
            "description": "An Endpoint that Envoy can route traffic to. [#next-free-field: 6]"
        },
        "envoy.config.endpoint.v3.LedsClusterLocalityConfig": {
            "properties": {
                "leds_config": {
                    "$ref": "#/definitions/envoy.config.core.v3.ConfigSource",
                    "additionalProperties": true,
                    "description": "Configuration for the source of LEDS updates for a Locality."
                },
                "leds_collection_name": {
                    "type": "string",
                    "description": "The xDS transport protocol glob collection resource name. The service is only supported in delta xDS (incremental) mode."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Leds Cluster Locality Config",
            "description": "[#not-implemented-hide:] A configuration for a LEDS collection."
        },
        "envoy.config.endpoint.v3.LocalityLbEndpoints": {
            "properties": {
                "locality": {
                    "$ref": "#/definitions/envoy.config.core.v3.Locality",
                    "additionalProperties": true,
                    "description": "Identifies location of where the upstream hosts run."
                },
                "lb_endpoints": {
                    "items": {
                        "$ref": "#/definitions/envoy.config.endpoint.v3.LbEndpoint"
                    },
                    "type": "array",
                    "description": "The group of endpoints belonging to the locality specified. [#comment:TODO(adisuissa): Once LEDS is implemented this field needs to be deprecated and replaced by ``load_balancer_endpoints``.]"
                },
                "load_balancer_endpoints": {
                    "$ref": "#/definitions/envoy.config.endpoint.v3.LocalityLbEndpoints.LbEndpointList",
                    "additionalProperties": true,
                    "description": "The group of endpoints belonging to the locality. [#comment:TODO(adisuissa): Once LEDS is implemented the ``lb_endpoints`` field needs to be deprecated.]"
                },
                "leds_cluster_locality_config": {
                    "$ref": "#/definitions/envoy.config.endpoint.v3.LedsClusterLocalityConfig",
                    "additionalProperties": true,
                    "description": "LEDS Configuration for the current locality."
                },
                "load_balancing_weight": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "Optional: Per priority/region/zone/sub_zone weight; at least 1. The load balancing weight for a locality is divided by the sum of the weights of all localities  at the same priority level to produce the effective percentage of traffic for the locality. The sum of the weights of all localities at the same priority level must not exceed uint32_t maximal value (4294967295). Locality weights are only considered when :ref:`locality weighted load balancing \u003carch_overview_load_balancing_locality_weighted_lb\u003e` is configured. These weights are ignored otherwise. If no weights are specified when locality weighted load balancing is enabled, the locality is assigned no load."
                },
                "priority": {
                    "type": "integer",
                    "description": "Optional: the priority for this LocalityLbEndpoints. If unspecified this will default to the highest priority (0). Under usual circumstances, Envoy will only select endpoints for the highest priority (0). In the event that enough endpoints for a particular priority are unavailable/unhealthy, Envoy will fail over to selecting endpoints for the next highest priority group. Read more at :ref:`priority levels \u003carch_overview_load_balancing_priority_levels\u003e`. Priorities should range from 0 (highest) to N (lowest) without skipping."
                },
                "proximity": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "Optional: Per locality proximity value which indicates how close this locality is from the source locality. This value only provides ordering information (lower the value, closer it is to the source locality). This will be consumed by load balancing schemes that need proximity order to determine where to route the requests. [#not-implemented-hide:]"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Locality Lb Endpoints",
            "description": "A group of endpoints belonging to a Locality. One can have multiple LocalityLbEndpoints for a locality, but only if they have different priorities. [#next-free-field: 9]"
        },
        "envoy.config.endpoint.v3.LocalityLbEndpoints.LbEndpointList": {
            "properties": {
                "lb_endpoints": {
                    "items": {
                        "$ref": "#/definitions/envoy.config.endpoint.v3.LbEndpoint"
                    },
                    "type": "array"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Lb Endpoint List",
            "description": "[#not-implemented-hide:] A list of endpoints of a specific locality."
        },
        "envoy.type.matcher.v3.RegexMatcher": {
            "properties": {
                "google_re2": {
                    "$ref": "#/definitions/envoy.type.matcher.v3.RegexMatcher.GoogleRE2",
                    "additionalProperties": true,
                    "description": "Google's RE2 regex engine."
                },
                "regex": {
                    "minLength": 1,
                    "type": "string",
                    "description": "The regex match string. The string must be supported by the configured engine. The regex is matched against the full string, not as a partial match."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "[#protodoc-title: Regex matcher]",
            "description": "[#protodoc-title: Regex matcher]  A regex matcher designed for safety when used with untrusted input."
        },
        "envoy.type.matcher.v3.RegexMatcher.GoogleRE2": {
            "properties": {
                "max_program_size": {
                    "additionalProperties": true,
                    "type": "integer",
                    "description": "This field controls the RE2 \"program size\" which is a rough estimate of how complex a compiled regex is to evaluate. A regex that has a program size greater than the configured value will fail to compile. In this case, the configured max program size can be increased or the regex can be simplified. If not specified, the default is 100. This field is deprecated; regexp validation should be performed on the management server instead of being done by each individual client. .. note::  Although this field is deprecated, the program size will still be checked against the  global ``re2.max_program_size.error_level`` runtime value."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Google RE 2",
            "description": "Google's `RE2 \u003chttps://github.com/google/re2\u003e`_ regex engine. The regex string must adhere to the documented `syntax \u003chttps://github.com/google/re2/wiki/Syntax\u003e`_. The engine is designed to complete execution in linear time as well as limit the amount of memory used. Envoy supports program size checking via runtime. The runtime keys ``re2.max_program_size.error_level`` and ``re2.max_program_size.warn_level`` can be set to integers as the maximum program size or complexity that a compiled regex can have before an exception is thrown or a warning is logged, respectively. ``re2.max_program_size.error_level`` defaults to 100, and ``re2.max_program_size.warn_level`` has no default if unset (will not check/log a warning). Envoy emits two stats for tracking the program size of regexes: the histogram ``re2.program_size``, which records the program size, and the counter ``re2.exceeded_warn_level``, which is incremented each time the program size exceeds the warn level threshold."
        },
        "envoy.type.matcher.v3.StringMatcher": {
            "properties": {
                "exact": {
                    "type": "string",
                    "description": "The input string must match exactly the string specified here. Examples: * ``abc`` only matches the value ``abc``."
                },
                "prefix": {
                    "minLength": 1,
                    "type": "string",
                    "description": "The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead. Examples: * ``abc`` matches the value ``abc.xyz``"
                },
                "suffix": {
                    "minLength": 1,
                    "type": "string",
                    "description": "The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead. Examples: * ``abc`` matches the value ``xyz.abc``"
                },
                "safe_regex": {
                    "$ref": "#/definitions/envoy.type.matcher.v3.RegexMatcher",
                    "additionalProperties": true,
                    "description": "The input string must match the regular expression specified here."
                },
                "contains": {
                    "minLength": 1,
                    "type": "string",
                    "description": "The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead. Examples: * ``abc`` matches the value ``xyz.abc.def``"
                },
                "custom": {
                    "$ref": "#/definitions/xds.core.v3.TypedExtensionConfig",
                    "additionalProperties": true,
                    "description": "Use an extension as the matcher type. [#extension-category: envoy.string_matcher]"
                },
                "ignore_case": {
                    "type": "boolean",
                    "description": "If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. This has no effect for the safe_regex match. For example, the matcher ``data`` will match both input string ``Data`` and ``data`` if set to true."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "[#protodoc-title: String matcher]",
            "description": "[#protodoc-title: String matcher]  Specifies the way to match a string. [#next-free-field: 9]"
        },
        "envoy.type.metadata.v3.MetadataKey": {
            "properties": {
                "key": {
                    "minLength": 1,
                    "type": "string",
                    "description": "The key name of Metadata to retrieve the Struct from the metadata. Typically, it represents a builtin subsystem or custom extension."
                },
                "path": {
                    "items": {
                        "$ref": "#/definitions/envoy.type.metadata.v3.MetadataKey.PathSegment"
                    },
                    "type": "array",
                    "description": "The path to retrieve the Value from the Struct. It can be a prefix or a full path, e.g. ``[prop, xyz]`` for a struct or ``[prop, foo]`` for a string in the example, which depends on the particular scenario. Note: Due to that only the key type segment is supported, the path can not specify a list unless the list is the last segment."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "[#protodoc-title: Metadata]",
            "description": "[#protodoc-title: Metadata]  MetadataKey provides a general interface using ``key`` and ``path`` to retrieve value from :ref:`Metadata \u003cenvoy_v3_api_msg_config.core.v3.Metadata\u003e`. For example, for the following Metadata: .. code-block:: yaml    filter_metadata:      envoy.xxx:        prop:          foo: bar          xyz:            hello: envoy The following MetadataKey will retrieve a string value \"bar\" from the Metadata. .. code-block:: yaml    key: envoy.xxx    path:    - key: prop    - key: foo"
        },
        "envoy.type.metadata.v3.MetadataKey.PathSegment": {
            "properties": {
                "key": {
                    "minLength": 1,
                    "type": "string",
                    "description": "If specified, use the key to retrieve the value in a Struct."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Path Segment",
            "description": "Specifies the segment in a path to retrieve value from Metadata. Currently it is only supported to specify the key, i.e. field name, as one segment of a path."
        },
        "envoy.type.v3.FractionalPercent": {
            "properties": {
                "numerator": {
                    "type": "integer",
                    "description": "Specifies the numerator. Defaults to 0."
                },
                "denominator": {
                    "enum": [
                        "HUNDRED",
                        0,
                        "TEN_THOUSAND",
                        1,
                        "MILLION",
                        2
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Denominator Type",
                    "description": "Fraction percentages support several fixed denominator values."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Fractional Percent",
            "description": "A fractional percentage is used in cases in which for performance reasons performing floating point to integer conversions during randomness calculations is undesirable. The message includes both a numerator and denominator that together determine the final fractional value. * **Example**: 1/100 = 1%. * **Example**: 3/10000 = 0.03%."
        },
        "envoy.type.v3.Int64Range": {
            "properties": {
                "start": {
                    "type": "string",
                    "description": "start of the range (inclusive)"
                },
                "end": {
                    "type": "string",
                    "description": "end of the range (exclusive)"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "[#protodoc-title: Range]",
            "description": "[#protodoc-title: Range]  Specifies the int64 start and end of the range using half-open interval semantics [start, end)."
        },
        "envoy.type.v3.Percent": {
            "properties": {
                "value": {
                    "type": "number"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "[#protodoc-title: Percent]",
            "description": "[#protodoc-title: Percent]  Identifies a percentage, in the range [0.0, 100.0]."
        },
        "xds.core.v3.Authority": {
            "properties": {
                "name": {
                    "minLength": 1,
                    "type": "string"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Authority",
            "description": "xDS authority information."
        },
        "xds.core.v3.TypedExtensionConfig": {
            "properties": {
                "name": {
                    "minLength": 1,
                    "type": "string",
                    "description": "The name of an extension. This is not used to select the extension, instead it serves the role of an opaque identifier."
                },
                "typed_config": {
                    "properties": {
                        "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. As of May 2023, there are no widely used type server implementations and no plans to implement one. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                        },
                        "value": {
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "binary",
                            "binaryEncoding": "base64"
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "The typed config for the extension. The type URL will be used to identify the extension. In the case that the type URL is *xds.type.v3.TypedStruct* (or, for historical reasons, *udpa.type.v1.TypedStruct*), the inner type URL of *TypedStruct* will be utilized. See the :ref:`extension configuration overview \u003cconfig_overview_extension_configuration\u003e` for further details."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Typed Extension Config",
            "description": "Message type for extension configuration."
        }
    }
}